// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoFactoryForConsole.proto

package poker.console;

public final class ProtoFactoryForConsole {
  private ProtoFactoryForConsole() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface RoomInfoReqProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 roomId = 1;
    /**
     * <code>required int32 roomId = 1;</code>
     */
    boolean hasRoomId();
    /**
     * <code>required int32 roomId = 1;</code>
     */
    int getRoomId();
  }
  /**
   * Protobuf type {@code poker.console.RoomInfoReqProto}
   */
  public static final class RoomInfoReqProto extends
      com.google.protobuf.GeneratedMessage
      implements RoomInfoReqProtoOrBuilder {
    // Use RoomInfoReqProto.newBuilder() to construct.
    private RoomInfoReqProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomInfoReqProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomInfoReqProto defaultInstance;
    public static RoomInfoReqProto getDefaultInstance() {
      return defaultInstance;
    }

    public RoomInfoReqProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomInfoReqProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              roomId_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomInfoReqProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomInfoReqProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              poker.console.ProtoFactoryForConsole.RoomInfoReqProto.class, poker.console.ProtoFactoryForConsole.RoomInfoReqProto.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomInfoReqProto> PARSER =
        new com.google.protobuf.AbstractParser<RoomInfoReqProto>() {
      public RoomInfoReqProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomInfoReqProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomInfoReqProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 roomId = 1;
    public static final int ROOMID_FIELD_NUMBER = 1;
    private int roomId_;
    /**
     * <code>required int32 roomId = 1;</code>
     */
    public boolean hasRoomId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 roomId = 1;</code>
     */
    public int getRoomId() {
      return roomId_;
    }

    private void initFields() {
      roomId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRoomId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, roomId_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, roomId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static poker.console.ProtoFactoryForConsole.RoomInfoReqProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoReqProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoReqProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoReqProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoReqProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoReqProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoReqProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoReqProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoReqProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoReqProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(poker.console.ProtoFactoryForConsole.RoomInfoReqProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code poker.console.RoomInfoReqProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements poker.console.ProtoFactoryForConsole.RoomInfoReqProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomInfoReqProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomInfoReqProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                poker.console.ProtoFactoryForConsole.RoomInfoReqProto.class, poker.console.ProtoFactoryForConsole.RoomInfoReqProto.Builder.class);
      }

      // Construct using poker.console.ProtoFactoryForConsole.RoomInfoReqProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        roomId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomInfoReqProto_descriptor;
      }

      public poker.console.ProtoFactoryForConsole.RoomInfoReqProto getDefaultInstanceForType() {
        return poker.console.ProtoFactoryForConsole.RoomInfoReqProto.getDefaultInstance();
      }

      public poker.console.ProtoFactoryForConsole.RoomInfoReqProto build() {
        poker.console.ProtoFactoryForConsole.RoomInfoReqProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public poker.console.ProtoFactoryForConsole.RoomInfoReqProto buildPartial() {
        poker.console.ProtoFactoryForConsole.RoomInfoReqProto result = new poker.console.ProtoFactoryForConsole.RoomInfoReqProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.roomId_ = roomId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof poker.console.ProtoFactoryForConsole.RoomInfoReqProto) {
          return mergeFrom((poker.console.ProtoFactoryForConsole.RoomInfoReqProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(poker.console.ProtoFactoryForConsole.RoomInfoReqProto other) {
        if (other == poker.console.ProtoFactoryForConsole.RoomInfoReqProto.getDefaultInstance()) return this;
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRoomId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        poker.console.ProtoFactoryForConsole.RoomInfoReqProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (poker.console.ProtoFactoryForConsole.RoomInfoReqProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 roomId = 1;
      private int roomId_ ;
      /**
       * <code>required int32 roomId = 1;</code>
       */
      public boolean hasRoomId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 roomId = 1;</code>
       */
      public int getRoomId() {
        return roomId_;
      }
      /**
       * <code>required int32 roomId = 1;</code>
       */
      public Builder setRoomId(int value) {
        bitField0_ |= 0x00000001;
        roomId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 roomId = 1;</code>
       */
      public Builder clearRoomId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        roomId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:poker.console.RoomInfoReqProto)
    }

    static {
      defaultInstance = new RoomInfoReqProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:poker.console.RoomInfoReqProto)
  }

  public interface PlayerInfoReqProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 roomId = 1;
    /**
     * <code>required int32 roomId = 1;</code>
     */
    boolean hasRoomId();
    /**
     * <code>required int32 roomId = 1;</code>
     */
    int getRoomId();

    // required int32 playerId = 2;
    /**
     * <code>required int32 playerId = 2;</code>
     */
    boolean hasPlayerId();
    /**
     * <code>required int32 playerId = 2;</code>
     */
    int getPlayerId();
  }
  /**
   * Protobuf type {@code poker.console.PlayerInfoReqProto}
   */
  public static final class PlayerInfoReqProto extends
      com.google.protobuf.GeneratedMessage
      implements PlayerInfoReqProtoOrBuilder {
    // Use PlayerInfoReqProto.newBuilder() to construct.
    private PlayerInfoReqProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PlayerInfoReqProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PlayerInfoReqProto defaultInstance;
    public static PlayerInfoReqProto getDefaultInstance() {
      return defaultInstance;
    }

    public PlayerInfoReqProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PlayerInfoReqProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              roomId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              playerId_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return poker.console.ProtoFactoryForConsole.internal_static_poker_console_PlayerInfoReqProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return poker.console.ProtoFactoryForConsole.internal_static_poker_console_PlayerInfoReqProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              poker.console.ProtoFactoryForConsole.PlayerInfoReqProto.class, poker.console.ProtoFactoryForConsole.PlayerInfoReqProto.Builder.class);
    }

    public static com.google.protobuf.Parser<PlayerInfoReqProto> PARSER =
        new com.google.protobuf.AbstractParser<PlayerInfoReqProto>() {
      public PlayerInfoReqProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlayerInfoReqProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PlayerInfoReqProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 roomId = 1;
    public static final int ROOMID_FIELD_NUMBER = 1;
    private int roomId_;
    /**
     * <code>required int32 roomId = 1;</code>
     */
    public boolean hasRoomId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 roomId = 1;</code>
     */
    public int getRoomId() {
      return roomId_;
    }

    // required int32 playerId = 2;
    public static final int PLAYERID_FIELD_NUMBER = 2;
    private int playerId_;
    /**
     * <code>required int32 playerId = 2;</code>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 playerId = 2;</code>
     */
    public int getPlayerId() {
      return playerId_;
    }

    private void initFields() {
      roomId_ = 0;
      playerId_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRoomId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPlayerId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, roomId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, playerId_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, roomId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, playerId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static poker.console.ProtoFactoryForConsole.PlayerInfoReqProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerInfoReqProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerInfoReqProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerInfoReqProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerInfoReqProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerInfoReqProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerInfoReqProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerInfoReqProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerInfoReqProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerInfoReqProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(poker.console.ProtoFactoryForConsole.PlayerInfoReqProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code poker.console.PlayerInfoReqProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements poker.console.ProtoFactoryForConsole.PlayerInfoReqProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_PlayerInfoReqProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_PlayerInfoReqProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                poker.console.ProtoFactoryForConsole.PlayerInfoReqProto.class, poker.console.ProtoFactoryForConsole.PlayerInfoReqProto.Builder.class);
      }

      // Construct using poker.console.ProtoFactoryForConsole.PlayerInfoReqProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        roomId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_PlayerInfoReqProto_descriptor;
      }

      public poker.console.ProtoFactoryForConsole.PlayerInfoReqProto getDefaultInstanceForType() {
        return poker.console.ProtoFactoryForConsole.PlayerInfoReqProto.getDefaultInstance();
      }

      public poker.console.ProtoFactoryForConsole.PlayerInfoReqProto build() {
        poker.console.ProtoFactoryForConsole.PlayerInfoReqProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public poker.console.ProtoFactoryForConsole.PlayerInfoReqProto buildPartial() {
        poker.console.ProtoFactoryForConsole.PlayerInfoReqProto result = new poker.console.ProtoFactoryForConsole.PlayerInfoReqProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.roomId_ = roomId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.playerId_ = playerId_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof poker.console.ProtoFactoryForConsole.PlayerInfoReqProto) {
          return mergeFrom((poker.console.ProtoFactoryForConsole.PlayerInfoReqProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(poker.console.ProtoFactoryForConsole.PlayerInfoReqProto other) {
        if (other == poker.console.ProtoFactoryForConsole.PlayerInfoReqProto.getDefaultInstance()) return this;
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (other.hasPlayerId()) {
          setPlayerId(other.getPlayerId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRoomId()) {
          
          return false;
        }
        if (!hasPlayerId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        poker.console.ProtoFactoryForConsole.PlayerInfoReqProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (poker.console.ProtoFactoryForConsole.PlayerInfoReqProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 roomId = 1;
      private int roomId_ ;
      /**
       * <code>required int32 roomId = 1;</code>
       */
      public boolean hasRoomId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 roomId = 1;</code>
       */
      public int getRoomId() {
        return roomId_;
      }
      /**
       * <code>required int32 roomId = 1;</code>
       */
      public Builder setRoomId(int value) {
        bitField0_ |= 0x00000001;
        roomId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 roomId = 1;</code>
       */
      public Builder clearRoomId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        roomId_ = 0;
        onChanged();
        return this;
      }

      // required int32 playerId = 2;
      private int playerId_ ;
      /**
       * <code>required int32 playerId = 2;</code>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 playerId = 2;</code>
       */
      public int getPlayerId() {
        return playerId_;
      }
      /**
       * <code>required int32 playerId = 2;</code>
       */
      public Builder setPlayerId(int value) {
        bitField0_ |= 0x00000002;
        playerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 playerId = 2;</code>
       */
      public Builder clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        playerId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:poker.console.PlayerInfoReqProto)
    }

    static {
      defaultInstance = new PlayerInfoReqProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:poker.console.PlayerInfoReqProto)
  }

  public interface RoomInfoProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .poker.console.PlayerProto playerList = 1;
    /**
     * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
     */
    java.util.List<poker.console.ProtoFactoryForConsole.PlayerProto> 
        getPlayerListList();
    /**
     * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
     */
    poker.console.ProtoFactoryForConsole.PlayerProto getPlayerList(int index);
    /**
     * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
     */
    int getPlayerListCount();
    /**
     * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
     */
    java.util.List<? extends poker.console.ProtoFactoryForConsole.PlayerProtoOrBuilder> 
        getPlayerListOrBuilderList();
    /**
     * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
     */
    poker.console.ProtoFactoryForConsole.PlayerProtoOrBuilder getPlayerListOrBuilder(
        int index);

    // required int32 roomId = 2;
    /**
     * <code>required int32 roomId = 2;</code>
     */
    boolean hasRoomId();
    /**
     * <code>required int32 roomId = 2;</code>
     */
    int getRoomId();

    // required int32 smallBlind = 3;
    /**
     * <code>required int32 smallBlind = 3;</code>
     */
    boolean hasSmallBlind();
    /**
     * <code>required int32 smallBlind = 3;</code>
     */
    int getSmallBlind();

    // required int32 minTake = 4;
    /**
     * <code>required int32 minTake = 4;</code>
     */
    boolean hasMinTake();
    /**
     * <code>required int32 minTake = 4;</code>
     */
    int getMinTake();

    // required int32 maxTake = 5;
    /**
     * <code>required int32 maxTake = 5;</code>
     */
    boolean hasMaxTake();
    /**
     * <code>required int32 maxTake = 5;</code>
     */
    int getMaxTake();

    // required int32 bankerSeat = 6;
    /**
     * <code>required int32 bankerSeat = 6;</code>
     */
    boolean hasBankerSeat();
    /**
     * <code>required int32 bankerSeat = 6;</code>
     */
    int getBankerSeat();

    // required int32 smallBlindSeat = 7;
    /**
     * <code>required int32 smallBlindSeat = 7;</code>
     */
    boolean hasSmallBlindSeat();
    /**
     * <code>required int32 smallBlindSeat = 7;</code>
     */
    int getSmallBlindSeat();

    // optional int32 smallBlindBetted = 8;
    /**
     * <code>optional int32 smallBlindBetted = 8;</code>
     */
    boolean hasSmallBlindBetted();
    /**
     * <code>optional int32 smallBlindBetted = 8;</code>
     */
    int getSmallBlindBetted();

    // required int32 bigBlindSeat = 9;
    /**
     * <code>required int32 bigBlindSeat = 9;</code>
     */
    boolean hasBigBlindSeat();
    /**
     * <code>required int32 bigBlindSeat = 9;</code>
     */
    int getBigBlindSeat();

    // optional int32 bigBlindBetted = 10;
    /**
     * <code>optional int32 bigBlindBetted = 10;</code>
     */
    boolean hasBigBlindBetted();
    /**
     * <code>optional int32 bigBlindBetted = 10;</code>
     */
    int getBigBlindBetted();

    // required int32 gamePhase = 11;
    /**
     * <code>required int32 gamePhase = 11;</code>
     *
     * <pre>
     *游戏进行阶段：0.未开始。1.初始化中。2.下注中。3.结算中。。
     * </pre>
     */
    boolean hasGamePhase();
    /**
     * <code>required int32 gamePhase = 11;</code>
     *
     * <pre>
     *游戏进行阶段：0.未开始。1.初始化中。2.下注中。3.结算中。。
     * </pre>
     */
    int getGamePhase();

    // optional int32 turn = 12;
    /**
     * <code>optional int32 turn = 12;</code>
     */
    boolean hasTurn();
    /**
     * <code>optional int32 turn = 12;</code>
     */
    int getTurn();

    // optional int32 bettingSeat = 13;
    /**
     * <code>optional int32 bettingSeat = 13;</code>
     */
    boolean hasBettingSeat();
    /**
     * <code>optional int32 bettingSeat = 13;</code>
     */
    int getBettingSeat();

    // optional bytes dealtBoardCards = 14;
    /**
     * <code>optional bytes dealtBoardCards = 14;</code>
     *
     * <pre>
     *已发公牌
     * </pre>
     */
    boolean hasDealtBoardCards();
    /**
     * <code>optional bytes dealtBoardCards = 14;</code>
     *
     * <pre>
     *已发公牌
     * </pre>
     */
    com.google.protobuf.ByteString getDealtBoardCards();
  }
  /**
   * Protobuf type {@code poker.console.RoomInfoProto}
   */
  public static final class RoomInfoProto extends
      com.google.protobuf.GeneratedMessage
      implements RoomInfoProtoOrBuilder {
    // Use RoomInfoProto.newBuilder() to construct.
    private RoomInfoProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomInfoProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomInfoProto defaultInstance;
    public static RoomInfoProto getDefaultInstance() {
      return defaultInstance;
    }

    public RoomInfoProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomInfoProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                playerList_ = new java.util.ArrayList<poker.console.ProtoFactoryForConsole.PlayerProto>();
                mutable_bitField0_ |= 0x00000001;
              }
              playerList_.add(input.readMessage(poker.console.ProtoFactoryForConsole.PlayerProto.PARSER, extensionRegistry));
              break;
            }
            case 16: {
              bitField0_ |= 0x00000001;
              roomId_ = input.readInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000002;
              smallBlind_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000004;
              minTake_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000008;
              maxTake_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000010;
              bankerSeat_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000020;
              smallBlindSeat_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              smallBlindBetted_ = input.readInt32();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000080;
              bigBlindSeat_ = input.readInt32();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000100;
              bigBlindBetted_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000200;
              gamePhase_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000400;
              turn_ = input.readInt32();
              break;
            }
            case 104: {
              bitField0_ |= 0x00000800;
              bettingSeat_ = input.readInt32();
              break;
            }
            case 114: {
              bitField0_ |= 0x00001000;
              dealtBoardCards_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          playerList_ = java.util.Collections.unmodifiableList(playerList_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomInfoProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomInfoProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              poker.console.ProtoFactoryForConsole.RoomInfoProto.class, poker.console.ProtoFactoryForConsole.RoomInfoProto.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomInfoProto> PARSER =
        new com.google.protobuf.AbstractParser<RoomInfoProto>() {
      public RoomInfoProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomInfoProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomInfoProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // repeated .poker.console.PlayerProto playerList = 1;
    public static final int PLAYERLIST_FIELD_NUMBER = 1;
    private java.util.List<poker.console.ProtoFactoryForConsole.PlayerProto> playerList_;
    /**
     * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
     */
    public java.util.List<poker.console.ProtoFactoryForConsole.PlayerProto> getPlayerListList() {
      return playerList_;
    }
    /**
     * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
     */
    public java.util.List<? extends poker.console.ProtoFactoryForConsole.PlayerProtoOrBuilder> 
        getPlayerListOrBuilderList() {
      return playerList_;
    }
    /**
     * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
     */
    public int getPlayerListCount() {
      return playerList_.size();
    }
    /**
     * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
     */
    public poker.console.ProtoFactoryForConsole.PlayerProto getPlayerList(int index) {
      return playerList_.get(index);
    }
    /**
     * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
     */
    public poker.console.ProtoFactoryForConsole.PlayerProtoOrBuilder getPlayerListOrBuilder(
        int index) {
      return playerList_.get(index);
    }

    // required int32 roomId = 2;
    public static final int ROOMID_FIELD_NUMBER = 2;
    private int roomId_;
    /**
     * <code>required int32 roomId = 2;</code>
     */
    public boolean hasRoomId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 roomId = 2;</code>
     */
    public int getRoomId() {
      return roomId_;
    }

    // required int32 smallBlind = 3;
    public static final int SMALLBLIND_FIELD_NUMBER = 3;
    private int smallBlind_;
    /**
     * <code>required int32 smallBlind = 3;</code>
     */
    public boolean hasSmallBlind() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 smallBlind = 3;</code>
     */
    public int getSmallBlind() {
      return smallBlind_;
    }

    // required int32 minTake = 4;
    public static final int MINTAKE_FIELD_NUMBER = 4;
    private int minTake_;
    /**
     * <code>required int32 minTake = 4;</code>
     */
    public boolean hasMinTake() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required int32 minTake = 4;</code>
     */
    public int getMinTake() {
      return minTake_;
    }

    // required int32 maxTake = 5;
    public static final int MAXTAKE_FIELD_NUMBER = 5;
    private int maxTake_;
    /**
     * <code>required int32 maxTake = 5;</code>
     */
    public boolean hasMaxTake() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 maxTake = 5;</code>
     */
    public int getMaxTake() {
      return maxTake_;
    }

    // required int32 bankerSeat = 6;
    public static final int BANKERSEAT_FIELD_NUMBER = 6;
    private int bankerSeat_;
    /**
     * <code>required int32 bankerSeat = 6;</code>
     */
    public boolean hasBankerSeat() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 bankerSeat = 6;</code>
     */
    public int getBankerSeat() {
      return bankerSeat_;
    }

    // required int32 smallBlindSeat = 7;
    public static final int SMALLBLINDSEAT_FIELD_NUMBER = 7;
    private int smallBlindSeat_;
    /**
     * <code>required int32 smallBlindSeat = 7;</code>
     */
    public boolean hasSmallBlindSeat() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 smallBlindSeat = 7;</code>
     */
    public int getSmallBlindSeat() {
      return smallBlindSeat_;
    }

    // optional int32 smallBlindBetted = 8;
    public static final int SMALLBLINDBETTED_FIELD_NUMBER = 8;
    private int smallBlindBetted_;
    /**
     * <code>optional int32 smallBlindBetted = 8;</code>
     */
    public boolean hasSmallBlindBetted() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 smallBlindBetted = 8;</code>
     */
    public int getSmallBlindBetted() {
      return smallBlindBetted_;
    }

    // required int32 bigBlindSeat = 9;
    public static final int BIGBLINDSEAT_FIELD_NUMBER = 9;
    private int bigBlindSeat_;
    /**
     * <code>required int32 bigBlindSeat = 9;</code>
     */
    public boolean hasBigBlindSeat() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required int32 bigBlindSeat = 9;</code>
     */
    public int getBigBlindSeat() {
      return bigBlindSeat_;
    }

    // optional int32 bigBlindBetted = 10;
    public static final int BIGBLINDBETTED_FIELD_NUMBER = 10;
    private int bigBlindBetted_;
    /**
     * <code>optional int32 bigBlindBetted = 10;</code>
     */
    public boolean hasBigBlindBetted() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional int32 bigBlindBetted = 10;</code>
     */
    public int getBigBlindBetted() {
      return bigBlindBetted_;
    }

    // required int32 gamePhase = 11;
    public static final int GAMEPHASE_FIELD_NUMBER = 11;
    private int gamePhase_;
    /**
     * <code>required int32 gamePhase = 11;</code>
     *
     * <pre>
     *游戏进行阶段：0.未开始。1.初始化中。2.下注中。3.结算中。。
     * </pre>
     */
    public boolean hasGamePhase() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required int32 gamePhase = 11;</code>
     *
     * <pre>
     *游戏进行阶段：0.未开始。1.初始化中。2.下注中。3.结算中。。
     * </pre>
     */
    public int getGamePhase() {
      return gamePhase_;
    }

    // optional int32 turn = 12;
    public static final int TURN_FIELD_NUMBER = 12;
    private int turn_;
    /**
     * <code>optional int32 turn = 12;</code>
     */
    public boolean hasTurn() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int32 turn = 12;</code>
     */
    public int getTurn() {
      return turn_;
    }

    // optional int32 bettingSeat = 13;
    public static final int BETTINGSEAT_FIELD_NUMBER = 13;
    private int bettingSeat_;
    /**
     * <code>optional int32 bettingSeat = 13;</code>
     */
    public boolean hasBettingSeat() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional int32 bettingSeat = 13;</code>
     */
    public int getBettingSeat() {
      return bettingSeat_;
    }

    // optional bytes dealtBoardCards = 14;
    public static final int DEALTBOARDCARDS_FIELD_NUMBER = 14;
    private com.google.protobuf.ByteString dealtBoardCards_;
    /**
     * <code>optional bytes dealtBoardCards = 14;</code>
     *
     * <pre>
     *已发公牌
     * </pre>
     */
    public boolean hasDealtBoardCards() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bytes dealtBoardCards = 14;</code>
     *
     * <pre>
     *已发公牌
     * </pre>
     */
    public com.google.protobuf.ByteString getDealtBoardCards() {
      return dealtBoardCards_;
    }

    private void initFields() {
      playerList_ = java.util.Collections.emptyList();
      roomId_ = 0;
      smallBlind_ = 0;
      minTake_ = 0;
      maxTake_ = 0;
      bankerSeat_ = 0;
      smallBlindSeat_ = 0;
      smallBlindBetted_ = 0;
      bigBlindSeat_ = 0;
      bigBlindBetted_ = 0;
      gamePhase_ = 0;
      turn_ = 0;
      bettingSeat_ = 0;
      dealtBoardCards_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasRoomId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSmallBlind()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMinTake()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMaxTake()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBankerSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSmallBlindSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBigBlindSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGamePhase()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getPlayerListCount(); i++) {
        if (!getPlayerList(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < playerList_.size(); i++) {
        output.writeMessage(1, playerList_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(2, roomId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(3, smallBlind_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(4, minTake_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(5, maxTake_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(6, bankerSeat_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(7, smallBlindSeat_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(8, smallBlindBetted_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeInt32(9, bigBlindSeat_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeInt32(10, bigBlindBetted_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(11, gamePhase_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(12, turn_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(13, bettingSeat_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBytes(14, dealtBoardCards_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < playerList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, playerList_.get(i));
      }
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, roomId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, smallBlind_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, minTake_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, maxTake_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, bankerSeat_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, smallBlindSeat_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, smallBlindBetted_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, bigBlindSeat_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, bigBlindBetted_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, gamePhase_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, turn_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(13, bettingSeat_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(14, dealtBoardCards_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static poker.console.ProtoFactoryForConsole.RoomInfoProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.RoomInfoProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(poker.console.ProtoFactoryForConsole.RoomInfoProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code poker.console.RoomInfoProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements poker.console.ProtoFactoryForConsole.RoomInfoProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomInfoProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomInfoProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                poker.console.ProtoFactoryForConsole.RoomInfoProto.class, poker.console.ProtoFactoryForConsole.RoomInfoProto.Builder.class);
      }

      // Construct using poker.console.ProtoFactoryForConsole.RoomInfoProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPlayerListFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (playerListBuilder_ == null) {
          playerList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          playerListBuilder_.clear();
        }
        roomId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        smallBlind_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        minTake_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        maxTake_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        bankerSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        smallBlindSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        smallBlindBetted_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        bigBlindSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        bigBlindBetted_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        gamePhase_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        turn_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        bettingSeat_ = 0;
        bitField0_ = (bitField0_ & ~0x00001000);
        dealtBoardCards_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00002000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomInfoProto_descriptor;
      }

      public poker.console.ProtoFactoryForConsole.RoomInfoProto getDefaultInstanceForType() {
        return poker.console.ProtoFactoryForConsole.RoomInfoProto.getDefaultInstance();
      }

      public poker.console.ProtoFactoryForConsole.RoomInfoProto build() {
        poker.console.ProtoFactoryForConsole.RoomInfoProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public poker.console.ProtoFactoryForConsole.RoomInfoProto buildPartial() {
        poker.console.ProtoFactoryForConsole.RoomInfoProto result = new poker.console.ProtoFactoryForConsole.RoomInfoProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (playerListBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            playerList_ = java.util.Collections.unmodifiableList(playerList_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.playerList_ = playerList_;
        } else {
          result.playerList_ = playerListBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000001;
        }
        result.roomId_ = roomId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000002;
        }
        result.smallBlind_ = smallBlind_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.minTake_ = minTake_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.maxTake_ = maxTake_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bankerSeat_ = bankerSeat_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.smallBlindSeat_ = smallBlindSeat_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.smallBlindBetted_ = smallBlindBetted_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000080;
        }
        result.bigBlindSeat_ = bigBlindSeat_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000100;
        }
        result.bigBlindBetted_ = bigBlindBetted_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000200;
        }
        result.gamePhase_ = gamePhase_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000400;
        }
        result.turn_ = turn_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.bettingSeat_ = bettingSeat_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.dealtBoardCards_ = dealtBoardCards_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof poker.console.ProtoFactoryForConsole.RoomInfoProto) {
          return mergeFrom((poker.console.ProtoFactoryForConsole.RoomInfoProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(poker.console.ProtoFactoryForConsole.RoomInfoProto other) {
        if (other == poker.console.ProtoFactoryForConsole.RoomInfoProto.getDefaultInstance()) return this;
        if (playerListBuilder_ == null) {
          if (!other.playerList_.isEmpty()) {
            if (playerList_.isEmpty()) {
              playerList_ = other.playerList_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensurePlayerListIsMutable();
              playerList_.addAll(other.playerList_);
            }
            onChanged();
          }
        } else {
          if (!other.playerList_.isEmpty()) {
            if (playerListBuilder_.isEmpty()) {
              playerListBuilder_.dispose();
              playerListBuilder_ = null;
              playerList_ = other.playerList_;
              bitField0_ = (bitField0_ & ~0x00000001);
              playerListBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getPlayerListFieldBuilder() : null;
            } else {
              playerListBuilder_.addAllMessages(other.playerList_);
            }
          }
        }
        if (other.hasRoomId()) {
          setRoomId(other.getRoomId());
        }
        if (other.hasSmallBlind()) {
          setSmallBlind(other.getSmallBlind());
        }
        if (other.hasMinTake()) {
          setMinTake(other.getMinTake());
        }
        if (other.hasMaxTake()) {
          setMaxTake(other.getMaxTake());
        }
        if (other.hasBankerSeat()) {
          setBankerSeat(other.getBankerSeat());
        }
        if (other.hasSmallBlindSeat()) {
          setSmallBlindSeat(other.getSmallBlindSeat());
        }
        if (other.hasSmallBlindBetted()) {
          setSmallBlindBetted(other.getSmallBlindBetted());
        }
        if (other.hasBigBlindSeat()) {
          setBigBlindSeat(other.getBigBlindSeat());
        }
        if (other.hasBigBlindBetted()) {
          setBigBlindBetted(other.getBigBlindBetted());
        }
        if (other.hasGamePhase()) {
          setGamePhase(other.getGamePhase());
        }
        if (other.hasTurn()) {
          setTurn(other.getTurn());
        }
        if (other.hasBettingSeat()) {
          setBettingSeat(other.getBettingSeat());
        }
        if (other.hasDealtBoardCards()) {
          setDealtBoardCards(other.getDealtBoardCards());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasRoomId()) {
          
          return false;
        }
        if (!hasSmallBlind()) {
          
          return false;
        }
        if (!hasMinTake()) {
          
          return false;
        }
        if (!hasMaxTake()) {
          
          return false;
        }
        if (!hasBankerSeat()) {
          
          return false;
        }
        if (!hasSmallBlindSeat()) {
          
          return false;
        }
        if (!hasBigBlindSeat()) {
          
          return false;
        }
        if (!hasGamePhase()) {
          
          return false;
        }
        for (int i = 0; i < getPlayerListCount(); i++) {
          if (!getPlayerList(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        poker.console.ProtoFactoryForConsole.RoomInfoProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (poker.console.ProtoFactoryForConsole.RoomInfoProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .poker.console.PlayerProto playerList = 1;
      private java.util.List<poker.console.ProtoFactoryForConsole.PlayerProto> playerList_ =
        java.util.Collections.emptyList();
      private void ensurePlayerListIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          playerList_ = new java.util.ArrayList<poker.console.ProtoFactoryForConsole.PlayerProto>(playerList_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          poker.console.ProtoFactoryForConsole.PlayerProto, poker.console.ProtoFactoryForConsole.PlayerProto.Builder, poker.console.ProtoFactoryForConsole.PlayerProtoOrBuilder> playerListBuilder_;

      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public java.util.List<poker.console.ProtoFactoryForConsole.PlayerProto> getPlayerListList() {
        if (playerListBuilder_ == null) {
          return java.util.Collections.unmodifiableList(playerList_);
        } else {
          return playerListBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public int getPlayerListCount() {
        if (playerListBuilder_ == null) {
          return playerList_.size();
        } else {
          return playerListBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public poker.console.ProtoFactoryForConsole.PlayerProto getPlayerList(int index) {
        if (playerListBuilder_ == null) {
          return playerList_.get(index);
        } else {
          return playerListBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public Builder setPlayerList(
          int index, poker.console.ProtoFactoryForConsole.PlayerProto value) {
        if (playerListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerListIsMutable();
          playerList_.set(index, value);
          onChanged();
        } else {
          playerListBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public Builder setPlayerList(
          int index, poker.console.ProtoFactoryForConsole.PlayerProto.Builder builderForValue) {
        if (playerListBuilder_ == null) {
          ensurePlayerListIsMutable();
          playerList_.set(index, builderForValue.build());
          onChanged();
        } else {
          playerListBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public Builder addPlayerList(poker.console.ProtoFactoryForConsole.PlayerProto value) {
        if (playerListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerListIsMutable();
          playerList_.add(value);
          onChanged();
        } else {
          playerListBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public Builder addPlayerList(
          int index, poker.console.ProtoFactoryForConsole.PlayerProto value) {
        if (playerListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensurePlayerListIsMutable();
          playerList_.add(index, value);
          onChanged();
        } else {
          playerListBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public Builder addPlayerList(
          poker.console.ProtoFactoryForConsole.PlayerProto.Builder builderForValue) {
        if (playerListBuilder_ == null) {
          ensurePlayerListIsMutable();
          playerList_.add(builderForValue.build());
          onChanged();
        } else {
          playerListBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public Builder addPlayerList(
          int index, poker.console.ProtoFactoryForConsole.PlayerProto.Builder builderForValue) {
        if (playerListBuilder_ == null) {
          ensurePlayerListIsMutable();
          playerList_.add(index, builderForValue.build());
          onChanged();
        } else {
          playerListBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public Builder addAllPlayerList(
          java.lang.Iterable<? extends poker.console.ProtoFactoryForConsole.PlayerProto> values) {
        if (playerListBuilder_ == null) {
          ensurePlayerListIsMutable();
          super.addAll(values, playerList_);
          onChanged();
        } else {
          playerListBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public Builder clearPlayerList() {
        if (playerListBuilder_ == null) {
          playerList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          playerListBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public Builder removePlayerList(int index) {
        if (playerListBuilder_ == null) {
          ensurePlayerListIsMutable();
          playerList_.remove(index);
          onChanged();
        } else {
          playerListBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public poker.console.ProtoFactoryForConsole.PlayerProto.Builder getPlayerListBuilder(
          int index) {
        return getPlayerListFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public poker.console.ProtoFactoryForConsole.PlayerProtoOrBuilder getPlayerListOrBuilder(
          int index) {
        if (playerListBuilder_ == null) {
          return playerList_.get(index);  } else {
          return playerListBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public java.util.List<? extends poker.console.ProtoFactoryForConsole.PlayerProtoOrBuilder> 
           getPlayerListOrBuilderList() {
        if (playerListBuilder_ != null) {
          return playerListBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(playerList_);
        }
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public poker.console.ProtoFactoryForConsole.PlayerProto.Builder addPlayerListBuilder() {
        return getPlayerListFieldBuilder().addBuilder(
            poker.console.ProtoFactoryForConsole.PlayerProto.getDefaultInstance());
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public poker.console.ProtoFactoryForConsole.PlayerProto.Builder addPlayerListBuilder(
          int index) {
        return getPlayerListFieldBuilder().addBuilder(
            index, poker.console.ProtoFactoryForConsole.PlayerProto.getDefaultInstance());
      }
      /**
       * <code>repeated .poker.console.PlayerProto playerList = 1;</code>
       */
      public java.util.List<poker.console.ProtoFactoryForConsole.PlayerProto.Builder> 
           getPlayerListBuilderList() {
        return getPlayerListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          poker.console.ProtoFactoryForConsole.PlayerProto, poker.console.ProtoFactoryForConsole.PlayerProto.Builder, poker.console.ProtoFactoryForConsole.PlayerProtoOrBuilder> 
          getPlayerListFieldBuilder() {
        if (playerListBuilder_ == null) {
          playerListBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              poker.console.ProtoFactoryForConsole.PlayerProto, poker.console.ProtoFactoryForConsole.PlayerProto.Builder, poker.console.ProtoFactoryForConsole.PlayerProtoOrBuilder>(
                  playerList_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          playerList_ = null;
        }
        return playerListBuilder_;
      }

      // required int32 roomId = 2;
      private int roomId_ ;
      /**
       * <code>required int32 roomId = 2;</code>
       */
      public boolean hasRoomId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 roomId = 2;</code>
       */
      public int getRoomId() {
        return roomId_;
      }
      /**
       * <code>required int32 roomId = 2;</code>
       */
      public Builder setRoomId(int value) {
        bitField0_ |= 0x00000002;
        roomId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 roomId = 2;</code>
       */
      public Builder clearRoomId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        roomId_ = 0;
        onChanged();
        return this;
      }

      // required int32 smallBlind = 3;
      private int smallBlind_ ;
      /**
       * <code>required int32 smallBlind = 3;</code>
       */
      public boolean hasSmallBlind() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 smallBlind = 3;</code>
       */
      public int getSmallBlind() {
        return smallBlind_;
      }
      /**
       * <code>required int32 smallBlind = 3;</code>
       */
      public Builder setSmallBlind(int value) {
        bitField0_ |= 0x00000004;
        smallBlind_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 smallBlind = 3;</code>
       */
      public Builder clearSmallBlind() {
        bitField0_ = (bitField0_ & ~0x00000004);
        smallBlind_ = 0;
        onChanged();
        return this;
      }

      // required int32 minTake = 4;
      private int minTake_ ;
      /**
       * <code>required int32 minTake = 4;</code>
       */
      public boolean hasMinTake() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 minTake = 4;</code>
       */
      public int getMinTake() {
        return minTake_;
      }
      /**
       * <code>required int32 minTake = 4;</code>
       */
      public Builder setMinTake(int value) {
        bitField0_ |= 0x00000008;
        minTake_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 minTake = 4;</code>
       */
      public Builder clearMinTake() {
        bitField0_ = (bitField0_ & ~0x00000008);
        minTake_ = 0;
        onChanged();
        return this;
      }

      // required int32 maxTake = 5;
      private int maxTake_ ;
      /**
       * <code>required int32 maxTake = 5;</code>
       */
      public boolean hasMaxTake() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 maxTake = 5;</code>
       */
      public int getMaxTake() {
        return maxTake_;
      }
      /**
       * <code>required int32 maxTake = 5;</code>
       */
      public Builder setMaxTake(int value) {
        bitField0_ |= 0x00000010;
        maxTake_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 maxTake = 5;</code>
       */
      public Builder clearMaxTake() {
        bitField0_ = (bitField0_ & ~0x00000010);
        maxTake_ = 0;
        onChanged();
        return this;
      }

      // required int32 bankerSeat = 6;
      private int bankerSeat_ ;
      /**
       * <code>required int32 bankerSeat = 6;</code>
       */
      public boolean hasBankerSeat() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 bankerSeat = 6;</code>
       */
      public int getBankerSeat() {
        return bankerSeat_;
      }
      /**
       * <code>required int32 bankerSeat = 6;</code>
       */
      public Builder setBankerSeat(int value) {
        bitField0_ |= 0x00000020;
        bankerSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 bankerSeat = 6;</code>
       */
      public Builder clearBankerSeat() {
        bitField0_ = (bitField0_ & ~0x00000020);
        bankerSeat_ = 0;
        onChanged();
        return this;
      }

      // required int32 smallBlindSeat = 7;
      private int smallBlindSeat_ ;
      /**
       * <code>required int32 smallBlindSeat = 7;</code>
       */
      public boolean hasSmallBlindSeat() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 smallBlindSeat = 7;</code>
       */
      public int getSmallBlindSeat() {
        return smallBlindSeat_;
      }
      /**
       * <code>required int32 smallBlindSeat = 7;</code>
       */
      public Builder setSmallBlindSeat(int value) {
        bitField0_ |= 0x00000040;
        smallBlindSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 smallBlindSeat = 7;</code>
       */
      public Builder clearSmallBlindSeat() {
        bitField0_ = (bitField0_ & ~0x00000040);
        smallBlindSeat_ = 0;
        onChanged();
        return this;
      }

      // optional int32 smallBlindBetted = 8;
      private int smallBlindBetted_ ;
      /**
       * <code>optional int32 smallBlindBetted = 8;</code>
       */
      public boolean hasSmallBlindBetted() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 smallBlindBetted = 8;</code>
       */
      public int getSmallBlindBetted() {
        return smallBlindBetted_;
      }
      /**
       * <code>optional int32 smallBlindBetted = 8;</code>
       */
      public Builder setSmallBlindBetted(int value) {
        bitField0_ |= 0x00000080;
        smallBlindBetted_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 smallBlindBetted = 8;</code>
       */
      public Builder clearSmallBlindBetted() {
        bitField0_ = (bitField0_ & ~0x00000080);
        smallBlindBetted_ = 0;
        onChanged();
        return this;
      }

      // required int32 bigBlindSeat = 9;
      private int bigBlindSeat_ ;
      /**
       * <code>required int32 bigBlindSeat = 9;</code>
       */
      public boolean hasBigBlindSeat() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required int32 bigBlindSeat = 9;</code>
       */
      public int getBigBlindSeat() {
        return bigBlindSeat_;
      }
      /**
       * <code>required int32 bigBlindSeat = 9;</code>
       */
      public Builder setBigBlindSeat(int value) {
        bitField0_ |= 0x00000100;
        bigBlindSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 bigBlindSeat = 9;</code>
       */
      public Builder clearBigBlindSeat() {
        bitField0_ = (bitField0_ & ~0x00000100);
        bigBlindSeat_ = 0;
        onChanged();
        return this;
      }

      // optional int32 bigBlindBetted = 10;
      private int bigBlindBetted_ ;
      /**
       * <code>optional int32 bigBlindBetted = 10;</code>
       */
      public boolean hasBigBlindBetted() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional int32 bigBlindBetted = 10;</code>
       */
      public int getBigBlindBetted() {
        return bigBlindBetted_;
      }
      /**
       * <code>optional int32 bigBlindBetted = 10;</code>
       */
      public Builder setBigBlindBetted(int value) {
        bitField0_ |= 0x00000200;
        bigBlindBetted_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 bigBlindBetted = 10;</code>
       */
      public Builder clearBigBlindBetted() {
        bitField0_ = (bitField0_ & ~0x00000200);
        bigBlindBetted_ = 0;
        onChanged();
        return this;
      }

      // required int32 gamePhase = 11;
      private int gamePhase_ ;
      /**
       * <code>required int32 gamePhase = 11;</code>
       *
       * <pre>
       *游戏进行阶段：0.未开始。1.初始化中。2.下注中。3.结算中。。
       * </pre>
       */
      public boolean hasGamePhase() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required int32 gamePhase = 11;</code>
       *
       * <pre>
       *游戏进行阶段：0.未开始。1.初始化中。2.下注中。3.结算中。。
       * </pre>
       */
      public int getGamePhase() {
        return gamePhase_;
      }
      /**
       * <code>required int32 gamePhase = 11;</code>
       *
       * <pre>
       *游戏进行阶段：0.未开始。1.初始化中。2.下注中。3.结算中。。
       * </pre>
       */
      public Builder setGamePhase(int value) {
        bitField0_ |= 0x00000400;
        gamePhase_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 gamePhase = 11;</code>
       *
       * <pre>
       *游戏进行阶段：0.未开始。1.初始化中。2.下注中。3.结算中。。
       * </pre>
       */
      public Builder clearGamePhase() {
        bitField0_ = (bitField0_ & ~0x00000400);
        gamePhase_ = 0;
        onChanged();
        return this;
      }

      // optional int32 turn = 12;
      private int turn_ ;
      /**
       * <code>optional int32 turn = 12;</code>
       */
      public boolean hasTurn() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional int32 turn = 12;</code>
       */
      public int getTurn() {
        return turn_;
      }
      /**
       * <code>optional int32 turn = 12;</code>
       */
      public Builder setTurn(int value) {
        bitField0_ |= 0x00000800;
        turn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 turn = 12;</code>
       */
      public Builder clearTurn() {
        bitField0_ = (bitField0_ & ~0x00000800);
        turn_ = 0;
        onChanged();
        return this;
      }

      // optional int32 bettingSeat = 13;
      private int bettingSeat_ ;
      /**
       * <code>optional int32 bettingSeat = 13;</code>
       */
      public boolean hasBettingSeat() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional int32 bettingSeat = 13;</code>
       */
      public int getBettingSeat() {
        return bettingSeat_;
      }
      /**
       * <code>optional int32 bettingSeat = 13;</code>
       */
      public Builder setBettingSeat(int value) {
        bitField0_ |= 0x00001000;
        bettingSeat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 bettingSeat = 13;</code>
       */
      public Builder clearBettingSeat() {
        bitField0_ = (bitField0_ & ~0x00001000);
        bettingSeat_ = 0;
        onChanged();
        return this;
      }

      // optional bytes dealtBoardCards = 14;
      private com.google.protobuf.ByteString dealtBoardCards_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes dealtBoardCards = 14;</code>
       *
       * <pre>
       *已发公牌
       * </pre>
       */
      public boolean hasDealtBoardCards() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional bytes dealtBoardCards = 14;</code>
       *
       * <pre>
       *已发公牌
       * </pre>
       */
      public com.google.protobuf.ByteString getDealtBoardCards() {
        return dealtBoardCards_;
      }
      /**
       * <code>optional bytes dealtBoardCards = 14;</code>
       *
       * <pre>
       *已发公牌
       * </pre>
       */
      public Builder setDealtBoardCards(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00002000;
        dealtBoardCards_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes dealtBoardCards = 14;</code>
       *
       * <pre>
       *已发公牌
       * </pre>
       */
      public Builder clearDealtBoardCards() {
        bitField0_ = (bitField0_ & ~0x00002000);
        dealtBoardCards_ = getDefaultInstance().getDealtBoardCards();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:poker.console.RoomInfoProto)
    }

    static {
      defaultInstance = new RoomInfoProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:poker.console.RoomInfoProto)
  }

  public interface PlayerProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int32 PlayerId = 1;
    /**
     * <code>required int32 PlayerId = 1;</code>
     */
    boolean hasPlayerId();
    /**
     * <code>required int32 PlayerId = 1;</code>
     */
    int getPlayerId();

    // required int32 seat = 2;
    /**
     * <code>required int32 seat = 2;</code>
     */
    boolean hasSeat();
    /**
     * <code>required int32 seat = 2;</code>
     */
    int getSeat();

    // optional string nickname = 3;
    /**
     * <code>optional string nickname = 3;</code>
     */
    boolean hasNickname();
    /**
     * <code>optional string nickname = 3;</code>
     */
    java.lang.String getNickname();
    /**
     * <code>optional string nickname = 3;</code>
     */
    com.google.protobuf.ByteString
        getNicknameBytes();

    // required int32 winTimes = 4;
    /**
     * <code>required int32 winTimes = 4;</code>
     */
    boolean hasWinTimes();
    /**
     * <code>required int32 winTimes = 4;</code>
     */
    int getWinTimes();

    // required int32 loseTimes = 5;
    /**
     * <code>required int32 loseTimes = 5;</code>
     */
    boolean hasLoseTimes();
    /**
     * <code>required int32 loseTimes = 5;</code>
     */
    int getLoseTimes();

    // required int32 portrait = 6;
    /**
     * <code>required int32 portrait = 6;</code>
     */
    boolean hasPortrait();
    /**
     * <code>required int32 portrait = 6;</code>
     */
    int getPortrait();

    // required int32 portraitBorder = 7;
    /**
     * <code>required int32 portraitBorder = 7;</code>
     */
    boolean hasPortraitBorder();
    /**
     * <code>required int32 portraitBorder = 7;</code>
     */
    int getPortraitBorder();

    // required bool male = 8;
    /**
     * <code>required bool male = 8;</code>
     */
    boolean hasMale();
    /**
     * <code>required bool male = 8;</code>
     */
    boolean getMale();

    // required bool isChallenger = 9;
    /**
     * <code>required bool isChallenger = 9;</code>
     */
    boolean hasIsChallenger();
    /**
     * <code>required bool isChallenger = 9;</code>
     */
    boolean getIsChallenger();

    // required int32 bankRoll = 10;
    /**
     * <code>required int32 bankRoll = 10;</code>
     *
     * <pre>
     *筹码
     * </pre>
     */
    boolean hasBankRoll();
    /**
     * <code>required int32 bankRoll = 10;</code>
     *
     * <pre>
     *筹码
     * </pre>
     */
    int getBankRoll();

    // required int32 gold = 11;
    /**
     * <code>required int32 gold = 11;</code>
     */
    boolean hasGold();
    /**
     * <code>required int32 gold = 11;</code>
     */
    int getGold();

    // required int32 maxScore = 12;
    /**
     * <code>required int32 maxScore = 12;</code>
     */
    boolean hasMaxScore();
    /**
     * <code>required int32 maxScore = 12;</code>
     */
    int getMaxScore();

    // optional bytes holeCards = 13;
    /**
     * <code>optional bytes holeCards = 13;</code>
     */
    boolean hasHoleCards();
    /**
     * <code>optional bytes holeCards = 13;</code>
     */
    com.google.protobuf.ByteString getHoleCards();

    // repeated int32 anteList = 14;
    /**
     * <code>repeated int32 anteList = 14;</code>
     */
    java.util.List<java.lang.Integer> getAnteListList();
    /**
     * <code>repeated int32 anteList = 14;</code>
     */
    int getAnteListCount();
    /**
     * <code>repeated int32 anteList = 14;</code>
     */
    int getAnteList(int index);

    // optional string headImg = 15;
    /**
     * <code>optional string headImg = 15;</code>
     */
    boolean hasHeadImg();
    /**
     * <code>optional string headImg = 15;</code>
     */
    java.lang.String getHeadImg();
    /**
     * <code>optional string headImg = 15;</code>
     */
    com.google.protobuf.ByteString
        getHeadImgBytes();
  }
  /**
   * Protobuf type {@code poker.console.PlayerProto}
   */
  public static final class PlayerProto extends
      com.google.protobuf.GeneratedMessage
      implements PlayerProtoOrBuilder {
    // Use PlayerProto.newBuilder() to construct.
    private PlayerProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private PlayerProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final PlayerProto defaultInstance;
    public static PlayerProto getDefaultInstance() {
      return defaultInstance;
    }

    public PlayerProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private PlayerProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              playerId_ = input.readInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              seat_ = input.readInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              nickname_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              winTimes_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              loseTimes_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              portrait_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              portraitBorder_ = input.readInt32();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000080;
              male_ = input.readBool();
              break;
            }
            case 72: {
              bitField0_ |= 0x00000100;
              isChallenger_ = input.readBool();
              break;
            }
            case 80: {
              bitField0_ |= 0x00000200;
              bankRoll_ = input.readInt32();
              break;
            }
            case 88: {
              bitField0_ |= 0x00000400;
              gold_ = input.readInt32();
              break;
            }
            case 96: {
              bitField0_ |= 0x00000800;
              maxScore_ = input.readInt32();
              break;
            }
            case 106: {
              bitField0_ |= 0x00001000;
              holeCards_ = input.readBytes();
              break;
            }
            case 112: {
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
                anteList_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              anteList_.add(input.readInt32());
              break;
            }
            case 114: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00002000) == 0x00002000) && input.getBytesUntilLimit() > 0) {
                anteList_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00002000;
              }
              while (input.getBytesUntilLimit() > 0) {
                anteList_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 122: {
              bitField0_ |= 0x00002000;
              headImg_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00002000) == 0x00002000)) {
          anteList_ = java.util.Collections.unmodifiableList(anteList_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return poker.console.ProtoFactoryForConsole.internal_static_poker_console_PlayerProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return poker.console.ProtoFactoryForConsole.internal_static_poker_console_PlayerProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              poker.console.ProtoFactoryForConsole.PlayerProto.class, poker.console.ProtoFactoryForConsole.PlayerProto.Builder.class);
    }

    public static com.google.protobuf.Parser<PlayerProto> PARSER =
        new com.google.protobuf.AbstractParser<PlayerProto>() {
      public PlayerProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new PlayerProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<PlayerProto> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int32 PlayerId = 1;
    public static final int PLAYERID_FIELD_NUMBER = 1;
    private int playerId_;
    /**
     * <code>required int32 PlayerId = 1;</code>
     */
    public boolean hasPlayerId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int32 PlayerId = 1;</code>
     */
    public int getPlayerId() {
      return playerId_;
    }

    // required int32 seat = 2;
    public static final int SEAT_FIELD_NUMBER = 2;
    private int seat_;
    /**
     * <code>required int32 seat = 2;</code>
     */
    public boolean hasSeat() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required int32 seat = 2;</code>
     */
    public int getSeat() {
      return seat_;
    }

    // optional string nickname = 3;
    public static final int NICKNAME_FIELD_NUMBER = 3;
    private java.lang.Object nickname_;
    /**
     * <code>optional string nickname = 3;</code>
     */
    public boolean hasNickname() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional string nickname = 3;</code>
     */
    public java.lang.String getNickname() {
      java.lang.Object ref = nickname_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          nickname_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string nickname = 3;</code>
     */
    public com.google.protobuf.ByteString
        getNicknameBytes() {
      java.lang.Object ref = nickname_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        nickname_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    // required int32 winTimes = 4;
    public static final int WINTIMES_FIELD_NUMBER = 4;
    private int winTimes_;
    /**
     * <code>required int32 winTimes = 4;</code>
     */
    public boolean hasWinTimes() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required int32 winTimes = 4;</code>
     */
    public int getWinTimes() {
      return winTimes_;
    }

    // required int32 loseTimes = 5;
    public static final int LOSETIMES_FIELD_NUMBER = 5;
    private int loseTimes_;
    /**
     * <code>required int32 loseTimes = 5;</code>
     */
    public boolean hasLoseTimes() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required int32 loseTimes = 5;</code>
     */
    public int getLoseTimes() {
      return loseTimes_;
    }

    // required int32 portrait = 6;
    public static final int PORTRAIT_FIELD_NUMBER = 6;
    private int portrait_;
    /**
     * <code>required int32 portrait = 6;</code>
     */
    public boolean hasPortrait() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required int32 portrait = 6;</code>
     */
    public int getPortrait() {
      return portrait_;
    }

    // required int32 portraitBorder = 7;
    public static final int PORTRAITBORDER_FIELD_NUMBER = 7;
    private int portraitBorder_;
    /**
     * <code>required int32 portraitBorder = 7;</code>
     */
    public boolean hasPortraitBorder() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required int32 portraitBorder = 7;</code>
     */
    public int getPortraitBorder() {
      return portraitBorder_;
    }

    // required bool male = 8;
    public static final int MALE_FIELD_NUMBER = 8;
    private boolean male_;
    /**
     * <code>required bool male = 8;</code>
     */
    public boolean hasMale() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>required bool male = 8;</code>
     */
    public boolean getMale() {
      return male_;
    }

    // required bool isChallenger = 9;
    public static final int ISCHALLENGER_FIELD_NUMBER = 9;
    private boolean isChallenger_;
    /**
     * <code>required bool isChallenger = 9;</code>
     */
    public boolean hasIsChallenger() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>required bool isChallenger = 9;</code>
     */
    public boolean getIsChallenger() {
      return isChallenger_;
    }

    // required int32 bankRoll = 10;
    public static final int BANKROLL_FIELD_NUMBER = 10;
    private int bankRoll_;
    /**
     * <code>required int32 bankRoll = 10;</code>
     *
     * <pre>
     *筹码
     * </pre>
     */
    public boolean hasBankRoll() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>required int32 bankRoll = 10;</code>
     *
     * <pre>
     *筹码
     * </pre>
     */
    public int getBankRoll() {
      return bankRoll_;
    }

    // required int32 gold = 11;
    public static final int GOLD_FIELD_NUMBER = 11;
    private int gold_;
    /**
     * <code>required int32 gold = 11;</code>
     */
    public boolean hasGold() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>required int32 gold = 11;</code>
     */
    public int getGold() {
      return gold_;
    }

    // required int32 maxScore = 12;
    public static final int MAXSCORE_FIELD_NUMBER = 12;
    private int maxScore_;
    /**
     * <code>required int32 maxScore = 12;</code>
     */
    public boolean hasMaxScore() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>required int32 maxScore = 12;</code>
     */
    public int getMaxScore() {
      return maxScore_;
    }

    // optional bytes holeCards = 13;
    public static final int HOLECARDS_FIELD_NUMBER = 13;
    private com.google.protobuf.ByteString holeCards_;
    /**
     * <code>optional bytes holeCards = 13;</code>
     */
    public boolean hasHoleCards() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bytes holeCards = 13;</code>
     */
    public com.google.protobuf.ByteString getHoleCards() {
      return holeCards_;
    }

    // repeated int32 anteList = 14;
    public static final int ANTELIST_FIELD_NUMBER = 14;
    private java.util.List<java.lang.Integer> anteList_;
    /**
     * <code>repeated int32 anteList = 14;</code>
     */
    public java.util.List<java.lang.Integer>
        getAnteListList() {
      return anteList_;
    }
    /**
     * <code>repeated int32 anteList = 14;</code>
     */
    public int getAnteListCount() {
      return anteList_.size();
    }
    /**
     * <code>repeated int32 anteList = 14;</code>
     */
    public int getAnteList(int index) {
      return anteList_.get(index);
    }

    // optional string headImg = 15;
    public static final int HEADIMG_FIELD_NUMBER = 15;
    private java.lang.Object headImg_;
    /**
     * <code>optional string headImg = 15;</code>
     */
    public boolean hasHeadImg() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional string headImg = 15;</code>
     */
    public java.lang.String getHeadImg() {
      java.lang.Object ref = headImg_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          headImg_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string headImg = 15;</code>
     */
    public com.google.protobuf.ByteString
        getHeadImgBytes() {
      java.lang.Object ref = headImg_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        headImg_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private void initFields() {
      playerId_ = 0;
      seat_ = 0;
      nickname_ = "";
      winTimes_ = 0;
      loseTimes_ = 0;
      portrait_ = 0;
      portraitBorder_ = 0;
      male_ = false;
      isChallenger_ = false;
      bankRoll_ = 0;
      gold_ = 0;
      maxScore_ = 0;
      holeCards_ = com.google.protobuf.ByteString.EMPTY;
      anteList_ = java.util.Collections.emptyList();
      headImg_ = "";
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasPlayerId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSeat()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasWinTimes()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLoseTimes()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPortrait()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPortraitBorder()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMale()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsChallenger()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBankRoll()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasGold()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMaxScore()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt32(2, seat_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, getNicknameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, winTimes_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, loseTimes_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, portrait_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, portraitBorder_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeBool(8, male_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeBool(9, isChallenger_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeInt32(10, bankRoll_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeInt32(11, gold_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeInt32(12, maxScore_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeBytes(13, holeCards_);
      }
      for (int i = 0; i < anteList_.size(); i++) {
        output.writeInt32(14, anteList_.get(i));
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeBytes(15, getHeadImgBytes());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, playerId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(2, seat_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, getNicknameBytes());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, winTimes_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, loseTimes_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, portrait_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, portraitBorder_);
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(8, male_);
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(9, isChallenger_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(10, bankRoll_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(11, gold_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(12, maxScore_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(13, holeCards_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < anteList_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(anteList_.get(i));
        }
        size += dataSize;
        size += 1 * getAnteListList().size();
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(15, getHeadImgBytes());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static poker.console.ProtoFactoryForConsole.PlayerProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.PlayerProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(poker.console.ProtoFactoryForConsole.PlayerProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code poker.console.PlayerProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements poker.console.ProtoFactoryForConsole.PlayerProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_PlayerProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_PlayerProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                poker.console.ProtoFactoryForConsole.PlayerProto.class, poker.console.ProtoFactoryForConsole.PlayerProto.Builder.class);
      }

      // Construct using poker.console.ProtoFactoryForConsole.PlayerProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        playerId_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        seat_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        nickname_ = "";
        bitField0_ = (bitField0_ & ~0x00000004);
        winTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        loseTimes_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        portrait_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        portraitBorder_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        male_ = false;
        bitField0_ = (bitField0_ & ~0x00000080);
        isChallenger_ = false;
        bitField0_ = (bitField0_ & ~0x00000100);
        bankRoll_ = 0;
        bitField0_ = (bitField0_ & ~0x00000200);
        gold_ = 0;
        bitField0_ = (bitField0_ & ~0x00000400);
        maxScore_ = 0;
        bitField0_ = (bitField0_ & ~0x00000800);
        holeCards_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00001000);
        anteList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        headImg_ = "";
        bitField0_ = (bitField0_ & ~0x00004000);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_PlayerProto_descriptor;
      }

      public poker.console.ProtoFactoryForConsole.PlayerProto getDefaultInstanceForType() {
        return poker.console.ProtoFactoryForConsole.PlayerProto.getDefaultInstance();
      }

      public poker.console.ProtoFactoryForConsole.PlayerProto build() {
        poker.console.ProtoFactoryForConsole.PlayerProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public poker.console.ProtoFactoryForConsole.PlayerProto buildPartial() {
        poker.console.ProtoFactoryForConsole.PlayerProto result = new poker.console.ProtoFactoryForConsole.PlayerProto(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.playerId_ = playerId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.seat_ = seat_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.nickname_ = nickname_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.winTimes_ = winTimes_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.loseTimes_ = loseTimes_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.portrait_ = portrait_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.portraitBorder_ = portraitBorder_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000080;
        }
        result.male_ = male_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000100;
        }
        result.isChallenger_ = isChallenger_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000200;
        }
        result.bankRoll_ = bankRoll_;
        if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
          to_bitField0_ |= 0x00000400;
        }
        result.gold_ = gold_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000800;
        }
        result.maxScore_ = maxScore_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.holeCards_ = holeCards_;
        if (((bitField0_ & 0x00002000) == 0x00002000)) {
          anteList_ = java.util.Collections.unmodifiableList(anteList_);
          bitField0_ = (bitField0_ & ~0x00002000);
        }
        result.anteList_ = anteList_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.headImg_ = headImg_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof poker.console.ProtoFactoryForConsole.PlayerProto) {
          return mergeFrom((poker.console.ProtoFactoryForConsole.PlayerProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(poker.console.ProtoFactoryForConsole.PlayerProto other) {
        if (other == poker.console.ProtoFactoryForConsole.PlayerProto.getDefaultInstance()) return this;
        if (other.hasPlayerId()) {
          setPlayerId(other.getPlayerId());
        }
        if (other.hasSeat()) {
          setSeat(other.getSeat());
        }
        if (other.hasNickname()) {
          bitField0_ |= 0x00000004;
          nickname_ = other.nickname_;
          onChanged();
        }
        if (other.hasWinTimes()) {
          setWinTimes(other.getWinTimes());
        }
        if (other.hasLoseTimes()) {
          setLoseTimes(other.getLoseTimes());
        }
        if (other.hasPortrait()) {
          setPortrait(other.getPortrait());
        }
        if (other.hasPortraitBorder()) {
          setPortraitBorder(other.getPortraitBorder());
        }
        if (other.hasMale()) {
          setMale(other.getMale());
        }
        if (other.hasIsChallenger()) {
          setIsChallenger(other.getIsChallenger());
        }
        if (other.hasBankRoll()) {
          setBankRoll(other.getBankRoll());
        }
        if (other.hasGold()) {
          setGold(other.getGold());
        }
        if (other.hasMaxScore()) {
          setMaxScore(other.getMaxScore());
        }
        if (other.hasHoleCards()) {
          setHoleCards(other.getHoleCards());
        }
        if (!other.anteList_.isEmpty()) {
          if (anteList_.isEmpty()) {
            anteList_ = other.anteList_;
            bitField0_ = (bitField0_ & ~0x00002000);
          } else {
            ensureAnteListIsMutable();
            anteList_.addAll(other.anteList_);
          }
          onChanged();
        }
        if (other.hasHeadImg()) {
          bitField0_ |= 0x00004000;
          headImg_ = other.headImg_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPlayerId()) {
          
          return false;
        }
        if (!hasSeat()) {
          
          return false;
        }
        if (!hasWinTimes()) {
          
          return false;
        }
        if (!hasLoseTimes()) {
          
          return false;
        }
        if (!hasPortrait()) {
          
          return false;
        }
        if (!hasPortraitBorder()) {
          
          return false;
        }
        if (!hasMale()) {
          
          return false;
        }
        if (!hasIsChallenger()) {
          
          return false;
        }
        if (!hasBankRoll()) {
          
          return false;
        }
        if (!hasGold()) {
          
          return false;
        }
        if (!hasMaxScore()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        poker.console.ProtoFactoryForConsole.PlayerProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (poker.console.ProtoFactoryForConsole.PlayerProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int32 PlayerId = 1;
      private int playerId_ ;
      /**
       * <code>required int32 PlayerId = 1;</code>
       */
      public boolean hasPlayerId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 PlayerId = 1;</code>
       */
      public int getPlayerId() {
        return playerId_;
      }
      /**
       * <code>required int32 PlayerId = 1;</code>
       */
      public Builder setPlayerId(int value) {
        bitField0_ |= 0x00000001;
        playerId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 PlayerId = 1;</code>
       */
      public Builder clearPlayerId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        playerId_ = 0;
        onChanged();
        return this;
      }

      // required int32 seat = 2;
      private int seat_ ;
      /**
       * <code>required int32 seat = 2;</code>
       */
      public boolean hasSeat() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 seat = 2;</code>
       */
      public int getSeat() {
        return seat_;
      }
      /**
       * <code>required int32 seat = 2;</code>
       */
      public Builder setSeat(int value) {
        bitField0_ |= 0x00000002;
        seat_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 seat = 2;</code>
       */
      public Builder clearSeat() {
        bitField0_ = (bitField0_ & ~0x00000002);
        seat_ = 0;
        onChanged();
        return this;
      }

      // optional string nickname = 3;
      private java.lang.Object nickname_ = "";
      /**
       * <code>optional string nickname = 3;</code>
       */
      public boolean hasNickname() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional string nickname = 3;</code>
       */
      public java.lang.String getNickname() {
        java.lang.Object ref = nickname_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          nickname_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string nickname = 3;</code>
       */
      public com.google.protobuf.ByteString
          getNicknameBytes() {
        java.lang.Object ref = nickname_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          nickname_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string nickname = 3;</code>
       */
      public Builder setNickname(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        nickname_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string nickname = 3;</code>
       */
      public Builder clearNickname() {
        bitField0_ = (bitField0_ & ~0x00000004);
        nickname_ = getDefaultInstance().getNickname();
        onChanged();
        return this;
      }
      /**
       * <code>optional string nickname = 3;</code>
       */
      public Builder setNicknameBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        nickname_ = value;
        onChanged();
        return this;
      }

      // required int32 winTimes = 4;
      private int winTimes_ ;
      /**
       * <code>required int32 winTimes = 4;</code>
       */
      public boolean hasWinTimes() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 winTimes = 4;</code>
       */
      public int getWinTimes() {
        return winTimes_;
      }
      /**
       * <code>required int32 winTimes = 4;</code>
       */
      public Builder setWinTimes(int value) {
        bitField0_ |= 0x00000008;
        winTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 winTimes = 4;</code>
       */
      public Builder clearWinTimes() {
        bitField0_ = (bitField0_ & ~0x00000008);
        winTimes_ = 0;
        onChanged();
        return this;
      }

      // required int32 loseTimes = 5;
      private int loseTimes_ ;
      /**
       * <code>required int32 loseTimes = 5;</code>
       */
      public boolean hasLoseTimes() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 loseTimes = 5;</code>
       */
      public int getLoseTimes() {
        return loseTimes_;
      }
      /**
       * <code>required int32 loseTimes = 5;</code>
       */
      public Builder setLoseTimes(int value) {
        bitField0_ |= 0x00000010;
        loseTimes_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 loseTimes = 5;</code>
       */
      public Builder clearLoseTimes() {
        bitField0_ = (bitField0_ & ~0x00000010);
        loseTimes_ = 0;
        onChanged();
        return this;
      }

      // required int32 portrait = 6;
      private int portrait_ ;
      /**
       * <code>required int32 portrait = 6;</code>
       */
      public boolean hasPortrait() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 portrait = 6;</code>
       */
      public int getPortrait() {
        return portrait_;
      }
      /**
       * <code>required int32 portrait = 6;</code>
       */
      public Builder setPortrait(int value) {
        bitField0_ |= 0x00000020;
        portrait_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 portrait = 6;</code>
       */
      public Builder clearPortrait() {
        bitField0_ = (bitField0_ & ~0x00000020);
        portrait_ = 0;
        onChanged();
        return this;
      }

      // required int32 portraitBorder = 7;
      private int portraitBorder_ ;
      /**
       * <code>required int32 portraitBorder = 7;</code>
       */
      public boolean hasPortraitBorder() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 portraitBorder = 7;</code>
       */
      public int getPortraitBorder() {
        return portraitBorder_;
      }
      /**
       * <code>required int32 portraitBorder = 7;</code>
       */
      public Builder setPortraitBorder(int value) {
        bitField0_ |= 0x00000040;
        portraitBorder_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 portraitBorder = 7;</code>
       */
      public Builder clearPortraitBorder() {
        bitField0_ = (bitField0_ & ~0x00000040);
        portraitBorder_ = 0;
        onChanged();
        return this;
      }

      // required bool male = 8;
      private boolean male_ ;
      /**
       * <code>required bool male = 8;</code>
       */
      public boolean hasMale() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required bool male = 8;</code>
       */
      public boolean getMale() {
        return male_;
      }
      /**
       * <code>required bool male = 8;</code>
       */
      public Builder setMale(boolean value) {
        bitField0_ |= 0x00000080;
        male_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool male = 8;</code>
       */
      public Builder clearMale() {
        bitField0_ = (bitField0_ & ~0x00000080);
        male_ = false;
        onChanged();
        return this;
      }

      // required bool isChallenger = 9;
      private boolean isChallenger_ ;
      /**
       * <code>required bool isChallenger = 9;</code>
       */
      public boolean hasIsChallenger() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required bool isChallenger = 9;</code>
       */
      public boolean getIsChallenger() {
        return isChallenger_;
      }
      /**
       * <code>required bool isChallenger = 9;</code>
       */
      public Builder setIsChallenger(boolean value) {
        bitField0_ |= 0x00000100;
        isChallenger_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bool isChallenger = 9;</code>
       */
      public Builder clearIsChallenger() {
        bitField0_ = (bitField0_ & ~0x00000100);
        isChallenger_ = false;
        onChanged();
        return this;
      }

      // required int32 bankRoll = 10;
      private int bankRoll_ ;
      /**
       * <code>required int32 bankRoll = 10;</code>
       *
       * <pre>
       *筹码
       * </pre>
       */
      public boolean hasBankRoll() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>required int32 bankRoll = 10;</code>
       *
       * <pre>
       *筹码
       * </pre>
       */
      public int getBankRoll() {
        return bankRoll_;
      }
      /**
       * <code>required int32 bankRoll = 10;</code>
       *
       * <pre>
       *筹码
       * </pre>
       */
      public Builder setBankRoll(int value) {
        bitField0_ |= 0x00000200;
        bankRoll_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 bankRoll = 10;</code>
       *
       * <pre>
       *筹码
       * </pre>
       */
      public Builder clearBankRoll() {
        bitField0_ = (bitField0_ & ~0x00000200);
        bankRoll_ = 0;
        onChanged();
        return this;
      }

      // required int32 gold = 11;
      private int gold_ ;
      /**
       * <code>required int32 gold = 11;</code>
       */
      public boolean hasGold() {
        return ((bitField0_ & 0x00000400) == 0x00000400);
      }
      /**
       * <code>required int32 gold = 11;</code>
       */
      public int getGold() {
        return gold_;
      }
      /**
       * <code>required int32 gold = 11;</code>
       */
      public Builder setGold(int value) {
        bitField0_ |= 0x00000400;
        gold_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 gold = 11;</code>
       */
      public Builder clearGold() {
        bitField0_ = (bitField0_ & ~0x00000400);
        gold_ = 0;
        onChanged();
        return this;
      }

      // required int32 maxScore = 12;
      private int maxScore_ ;
      /**
       * <code>required int32 maxScore = 12;</code>
       */
      public boolean hasMaxScore() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>required int32 maxScore = 12;</code>
       */
      public int getMaxScore() {
        return maxScore_;
      }
      /**
       * <code>required int32 maxScore = 12;</code>
       */
      public Builder setMaxScore(int value) {
        bitField0_ |= 0x00000800;
        maxScore_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int32 maxScore = 12;</code>
       */
      public Builder clearMaxScore() {
        bitField0_ = (bitField0_ & ~0x00000800);
        maxScore_ = 0;
        onChanged();
        return this;
      }

      // optional bytes holeCards = 13;
      private com.google.protobuf.ByteString holeCards_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes holeCards = 13;</code>
       */
      public boolean hasHoleCards() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional bytes holeCards = 13;</code>
       */
      public com.google.protobuf.ByteString getHoleCards() {
        return holeCards_;
      }
      /**
       * <code>optional bytes holeCards = 13;</code>
       */
      public Builder setHoleCards(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00001000;
        holeCards_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes holeCards = 13;</code>
       */
      public Builder clearHoleCards() {
        bitField0_ = (bitField0_ & ~0x00001000);
        holeCards_ = getDefaultInstance().getHoleCards();
        onChanged();
        return this;
      }

      // repeated int32 anteList = 14;
      private java.util.List<java.lang.Integer> anteList_ = java.util.Collections.emptyList();
      private void ensureAnteListIsMutable() {
        if (!((bitField0_ & 0x00002000) == 0x00002000)) {
          anteList_ = new java.util.ArrayList<java.lang.Integer>(anteList_);
          bitField0_ |= 0x00002000;
         }
      }
      /**
       * <code>repeated int32 anteList = 14;</code>
       */
      public java.util.List<java.lang.Integer>
          getAnteListList() {
        return java.util.Collections.unmodifiableList(anteList_);
      }
      /**
       * <code>repeated int32 anteList = 14;</code>
       */
      public int getAnteListCount() {
        return anteList_.size();
      }
      /**
       * <code>repeated int32 anteList = 14;</code>
       */
      public int getAnteList(int index) {
        return anteList_.get(index);
      }
      /**
       * <code>repeated int32 anteList = 14;</code>
       */
      public Builder setAnteList(
          int index, int value) {
        ensureAnteListIsMutable();
        anteList_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 anteList = 14;</code>
       */
      public Builder addAnteList(int value) {
        ensureAnteListIsMutable();
        anteList_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 anteList = 14;</code>
       */
      public Builder addAllAnteList(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAnteListIsMutable();
        super.addAll(values, anteList_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 anteList = 14;</code>
       */
      public Builder clearAnteList() {
        anteList_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00002000);
        onChanged();
        return this;
      }

      // optional string headImg = 15;
      private java.lang.Object headImg_ = "";
      /**
       * <code>optional string headImg = 15;</code>
       */
      public boolean hasHeadImg() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional string headImg = 15;</code>
       */
      public java.lang.String getHeadImg() {
        java.lang.Object ref = headImg_;
        if (!(ref instanceof java.lang.String)) {
          java.lang.String s = ((com.google.protobuf.ByteString) ref)
              .toStringUtf8();
          headImg_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string headImg = 15;</code>
       */
      public com.google.protobuf.ByteString
          getHeadImgBytes() {
        java.lang.Object ref = headImg_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          headImg_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string headImg = 15;</code>
       */
      public Builder setHeadImg(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
        headImg_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string headImg = 15;</code>
       */
      public Builder clearHeadImg() {
        bitField0_ = (bitField0_ & ~0x00004000);
        headImg_ = getDefaultInstance().getHeadImg();
        onChanged();
        return this;
      }
      /**
       * <code>optional string headImg = 15;</code>
       */
      public Builder setHeadImgBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00004000;
        headImg_ = value;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:poker.console.PlayerProto)
    }

    static {
      defaultInstance = new PlayerProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:poker.console.PlayerProto)
  }

  public interface RoomListProtoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .poker.console.RoomListProto.RoomProto roomList = 1;
    /**
     * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
     */
    java.util.List<poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto> 
        getRoomListList();
    /**
     * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
     */
    poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto getRoomList(int index);
    /**
     * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
     */
    int getRoomListCount();
    /**
     * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
     */
    java.util.List<? extends poker.console.ProtoFactoryForConsole.RoomListProto.RoomProtoOrBuilder> 
        getRoomListOrBuilderList();
    /**
     * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
     */
    poker.console.ProtoFactoryForConsole.RoomListProto.RoomProtoOrBuilder getRoomListOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code poker.console.RoomListProto}
   */
  public static final class RoomListProto extends
      com.google.protobuf.GeneratedMessage
      implements RoomListProtoOrBuilder {
    // Use RoomListProto.newBuilder() to construct.
    private RoomListProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private RoomListProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final RoomListProto defaultInstance;
    public static RoomListProto getDefaultInstance() {
      return defaultInstance;
    }

    public RoomListProto getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private RoomListProto(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                roomList_ = new java.util.ArrayList<poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto>();
                mutable_bitField0_ |= 0x00000001;
              }
              roomList_.add(input.readMessage(poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          roomList_ = java.util.Collections.unmodifiableList(roomList_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomListProto_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomListProto_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              poker.console.ProtoFactoryForConsole.RoomListProto.class, poker.console.ProtoFactoryForConsole.RoomListProto.Builder.class);
    }

    public static com.google.protobuf.Parser<RoomListProto> PARSER =
        new com.google.protobuf.AbstractParser<RoomListProto>() {
      public RoomListProto parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new RoomListProto(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<RoomListProto> getParserForType() {
      return PARSER;
    }

    public interface RoomProtoOrBuilder
        extends com.google.protobuf.MessageOrBuilder {

      // required int32 roomId = 1;
      /**
       * <code>required int32 roomId = 1;</code>
       */
      boolean hasRoomId();
      /**
       * <code>required int32 roomId = 1;</code>
       */
      int getRoomId();

      // required int32 roomType = 2;
      /**
       * <code>required int32 roomType = 2;</code>
       */
      boolean hasRoomType();
      /**
       * <code>required int32 roomType = 2;</code>
       */
      int getRoomType();

      // required int32 roomLevel = 3;
      /**
       * <code>required int32 roomLevel = 3;</code>
       */
      boolean hasRoomLevel();
      /**
       * <code>required int32 roomLevel = 3;</code>
       */
      int getRoomLevel();

      // required int32 roomPhase = 4;
      /**
       * <code>required int32 roomPhase = 4;</code>
       */
      boolean hasRoomPhase();
      /**
       * <code>required int32 roomPhase = 4;</code>
       */
      int getRoomPhase();

      // required int32 playingCount = 6;
      /**
       * <code>required int32 playingCount = 6;</code>
       */
      boolean hasPlayingCount();
      /**
       * <code>required int32 playingCount = 6;</code>
       */
      int getPlayingCount();

      // required int32 sittingCount = 7;
      /**
       * <code>required int32 sittingCount = 7;</code>
       */
      boolean hasSittingCount();
      /**
       * <code>required int32 sittingCount = 7;</code>
       */
      int getSittingCount();

      // required int32 seatsCount = 8;
      /**
       * <code>required int32 seatsCount = 8;</code>
       */
      boolean hasSeatsCount();
      /**
       * <code>required int32 seatsCount = 8;</code>
       */
      int getSeatsCount();

      // required int32 betableCount = 9;
      /**
       * <code>required int32 betableCount = 9;</code>
       */
      boolean hasBetableCount();
      /**
       * <code>required int32 betableCount = 9;</code>
       */
      int getBetableCount();

      // required int32 noFoldCount = 10;
      /**
       * <code>required int32 noFoldCount = 10;</code>
       */
      boolean hasNoFoldCount();
      /**
       * <code>required int32 noFoldCount = 10;</code>
       */
      int getNoFoldCount();
    }
    /**
     * Protobuf type {@code poker.console.RoomListProto.RoomProto}
     */
    public static final class RoomProto extends
        com.google.protobuf.GeneratedMessage
        implements RoomProtoOrBuilder {
      // Use RoomProto.newBuilder() to construct.
      private RoomProto(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private RoomProto(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final RoomProto defaultInstance;
      public static RoomProto getDefaultInstance() {
        return defaultInstance;
      }

      public RoomProto getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private RoomProto(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 8: {
                bitField0_ |= 0x00000001;
                roomId_ = input.readInt32();
                break;
              }
              case 16: {
                bitField0_ |= 0x00000002;
                roomType_ = input.readInt32();
                break;
              }
              case 24: {
                bitField0_ |= 0x00000004;
                roomLevel_ = input.readInt32();
                break;
              }
              case 32: {
                bitField0_ |= 0x00000008;
                roomPhase_ = input.readInt32();
                break;
              }
              case 48: {
                bitField0_ |= 0x00000010;
                playingCount_ = input.readInt32();
                break;
              }
              case 56: {
                bitField0_ |= 0x00000020;
                sittingCount_ = input.readInt32();
                break;
              }
              case 64: {
                bitField0_ |= 0x00000040;
                seatsCount_ = input.readInt32();
                break;
              }
              case 72: {
                bitField0_ |= 0x00000080;
                betableCount_ = input.readInt32();
                break;
              }
              case 80: {
                bitField0_ |= 0x00000100;
                noFoldCount_ = input.readInt32();
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomListProto_RoomProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomListProto_RoomProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.class, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.Builder.class);
      }

      public static com.google.protobuf.Parser<RoomProto> PARSER =
          new com.google.protobuf.AbstractParser<RoomProto>() {
        public RoomProto parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new RoomProto(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<RoomProto> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      // required int32 roomId = 1;
      public static final int ROOMID_FIELD_NUMBER = 1;
      private int roomId_;
      /**
       * <code>required int32 roomId = 1;</code>
       */
      public boolean hasRoomId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int32 roomId = 1;</code>
       */
      public int getRoomId() {
        return roomId_;
      }

      // required int32 roomType = 2;
      public static final int ROOMTYPE_FIELD_NUMBER = 2;
      private int roomType_;
      /**
       * <code>required int32 roomType = 2;</code>
       */
      public boolean hasRoomType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required int32 roomType = 2;</code>
       */
      public int getRoomType() {
        return roomType_;
      }

      // required int32 roomLevel = 3;
      public static final int ROOMLEVEL_FIELD_NUMBER = 3;
      private int roomLevel_;
      /**
       * <code>required int32 roomLevel = 3;</code>
       */
      public boolean hasRoomLevel() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required int32 roomLevel = 3;</code>
       */
      public int getRoomLevel() {
        return roomLevel_;
      }

      // required int32 roomPhase = 4;
      public static final int ROOMPHASE_FIELD_NUMBER = 4;
      private int roomPhase_;
      /**
       * <code>required int32 roomPhase = 4;</code>
       */
      public boolean hasRoomPhase() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required int32 roomPhase = 4;</code>
       */
      public int getRoomPhase() {
        return roomPhase_;
      }

      // required int32 playingCount = 6;
      public static final int PLAYINGCOUNT_FIELD_NUMBER = 6;
      private int playingCount_;
      /**
       * <code>required int32 playingCount = 6;</code>
       */
      public boolean hasPlayingCount() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required int32 playingCount = 6;</code>
       */
      public int getPlayingCount() {
        return playingCount_;
      }

      // required int32 sittingCount = 7;
      public static final int SITTINGCOUNT_FIELD_NUMBER = 7;
      private int sittingCount_;
      /**
       * <code>required int32 sittingCount = 7;</code>
       */
      public boolean hasSittingCount() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required int32 sittingCount = 7;</code>
       */
      public int getSittingCount() {
        return sittingCount_;
      }

      // required int32 seatsCount = 8;
      public static final int SEATSCOUNT_FIELD_NUMBER = 8;
      private int seatsCount_;
      /**
       * <code>required int32 seatsCount = 8;</code>
       */
      public boolean hasSeatsCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required int32 seatsCount = 8;</code>
       */
      public int getSeatsCount() {
        return seatsCount_;
      }

      // required int32 betableCount = 9;
      public static final int BETABLECOUNT_FIELD_NUMBER = 9;
      private int betableCount_;
      /**
       * <code>required int32 betableCount = 9;</code>
       */
      public boolean hasBetableCount() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>required int32 betableCount = 9;</code>
       */
      public int getBetableCount() {
        return betableCount_;
      }

      // required int32 noFoldCount = 10;
      public static final int NOFOLDCOUNT_FIELD_NUMBER = 10;
      private int noFoldCount_;
      /**
       * <code>required int32 noFoldCount = 10;</code>
       */
      public boolean hasNoFoldCount() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>required int32 noFoldCount = 10;</code>
       */
      public int getNoFoldCount() {
        return noFoldCount_;
      }

      private void initFields() {
        roomId_ = 0;
        roomType_ = 0;
        roomLevel_ = 0;
        roomPhase_ = 0;
        playingCount_ = 0;
        sittingCount_ = 0;
        seatsCount_ = 0;
        betableCount_ = 0;
        noFoldCount_ = 0;
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized != -1) return isInitialized == 1;

        if (!hasRoomId()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasRoomType()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasRoomLevel()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasRoomPhase()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasPlayingCount()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasSittingCount()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasSeatsCount()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasBetableCount()) {
          memoizedIsInitialized = 0;
          return false;
        }
        if (!hasNoFoldCount()) {
          memoizedIsInitialized = 0;
          return false;
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeInt32(1, roomId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeInt32(2, roomType_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          output.writeInt32(3, roomLevel_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          output.writeInt32(4, roomPhase_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          output.writeInt32(6, playingCount_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          output.writeInt32(7, sittingCount_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          output.writeInt32(8, seatsCount_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          output.writeInt32(9, betableCount_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          output.writeInt32(10, noFoldCount_);
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(1, roomId_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(2, roomType_);
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(3, roomLevel_);
        }
        if (((bitField0_ & 0x00000008) == 0x00000008)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(4, roomPhase_);
        }
        if (((bitField0_ & 0x00000010) == 0x00000010)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(6, playingCount_);
        }
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(7, sittingCount_);
        }
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(8, seatsCount_);
        }
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(9, betableCount_);
        }
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          size += com.google.protobuf.CodedOutputStream
            .computeInt32Size(10, noFoldCount_);
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code poker.console.RoomListProto.RoomProto}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder>
         implements poker.console.ProtoFactoryForConsole.RoomListProto.RoomProtoOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomListProto_RoomProto_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomListProto_RoomProto_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.class, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.Builder.class);
        }

        // Construct using poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          roomId_ = 0;
          bitField0_ = (bitField0_ & ~0x00000001);
          roomType_ = 0;
          bitField0_ = (bitField0_ & ~0x00000002);
          roomLevel_ = 0;
          bitField0_ = (bitField0_ & ~0x00000004);
          roomPhase_ = 0;
          bitField0_ = (bitField0_ & ~0x00000008);
          playingCount_ = 0;
          bitField0_ = (bitField0_ & ~0x00000010);
          sittingCount_ = 0;
          bitField0_ = (bitField0_ & ~0x00000020);
          seatsCount_ = 0;
          bitField0_ = (bitField0_ & ~0x00000040);
          betableCount_ = 0;
          bitField0_ = (bitField0_ & ~0x00000080);
          noFoldCount_ = 0;
          bitField0_ = (bitField0_ & ~0x00000100);
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomListProto_RoomProto_descriptor;
        }

        public poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto getDefaultInstanceForType() {
          return poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.getDefaultInstance();
        }

        public poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto build() {
          poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto buildPartial() {
          poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto result = new poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          result.roomId_ = roomId_;
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          result.roomType_ = roomType_;
          if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
            to_bitField0_ |= 0x00000004;
          }
          result.roomLevel_ = roomLevel_;
          if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
            to_bitField0_ |= 0x00000008;
          }
          result.roomPhase_ = roomPhase_;
          if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
            to_bitField0_ |= 0x00000010;
          }
          result.playingCount_ = playingCount_;
          if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
            to_bitField0_ |= 0x00000020;
          }
          result.sittingCount_ = sittingCount_;
          if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
            to_bitField0_ |= 0x00000040;
          }
          result.seatsCount_ = seatsCount_;
          if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
            to_bitField0_ |= 0x00000080;
          }
          result.betableCount_ = betableCount_;
          if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
            to_bitField0_ |= 0x00000100;
          }
          result.noFoldCount_ = noFoldCount_;
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto) {
            return mergeFrom((poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto other) {
          if (other == poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.getDefaultInstance()) return this;
          if (other.hasRoomId()) {
            setRoomId(other.getRoomId());
          }
          if (other.hasRoomType()) {
            setRoomType(other.getRoomType());
          }
          if (other.hasRoomLevel()) {
            setRoomLevel(other.getRoomLevel());
          }
          if (other.hasRoomPhase()) {
            setRoomPhase(other.getRoomPhase());
          }
          if (other.hasPlayingCount()) {
            setPlayingCount(other.getPlayingCount());
          }
          if (other.hasSittingCount()) {
            setSittingCount(other.getSittingCount());
          }
          if (other.hasSeatsCount()) {
            setSeatsCount(other.getSeatsCount());
          }
          if (other.hasBetableCount()) {
            setBetableCount(other.getBetableCount());
          }
          if (other.hasNoFoldCount()) {
            setNoFoldCount(other.getNoFoldCount());
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          if (!hasRoomId()) {
            
            return false;
          }
          if (!hasRoomType()) {
            
            return false;
          }
          if (!hasRoomLevel()) {
            
            return false;
          }
          if (!hasRoomPhase()) {
            
            return false;
          }
          if (!hasPlayingCount()) {
            
            return false;
          }
          if (!hasSittingCount()) {
            
            return false;
          }
          if (!hasSeatsCount()) {
            
            return false;
          }
          if (!hasBetableCount()) {
            
            return false;
          }
          if (!hasNoFoldCount()) {
            
            return false;
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        // required int32 roomId = 1;
        private int roomId_ ;
        /**
         * <code>required int32 roomId = 1;</code>
         */
        public boolean hasRoomId() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>required int32 roomId = 1;</code>
         */
        public int getRoomId() {
          return roomId_;
        }
        /**
         * <code>required int32 roomId = 1;</code>
         */
        public Builder setRoomId(int value) {
          bitField0_ |= 0x00000001;
          roomId_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 roomId = 1;</code>
         */
        public Builder clearRoomId() {
          bitField0_ = (bitField0_ & ~0x00000001);
          roomId_ = 0;
          onChanged();
          return this;
        }

        // required int32 roomType = 2;
        private int roomType_ ;
        /**
         * <code>required int32 roomType = 2;</code>
         */
        public boolean hasRoomType() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>required int32 roomType = 2;</code>
         */
        public int getRoomType() {
          return roomType_;
        }
        /**
         * <code>required int32 roomType = 2;</code>
         */
        public Builder setRoomType(int value) {
          bitField0_ |= 0x00000002;
          roomType_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 roomType = 2;</code>
         */
        public Builder clearRoomType() {
          bitField0_ = (bitField0_ & ~0x00000002);
          roomType_ = 0;
          onChanged();
          return this;
        }

        // required int32 roomLevel = 3;
        private int roomLevel_ ;
        /**
         * <code>required int32 roomLevel = 3;</code>
         */
        public boolean hasRoomLevel() {
          return ((bitField0_ & 0x00000004) == 0x00000004);
        }
        /**
         * <code>required int32 roomLevel = 3;</code>
         */
        public int getRoomLevel() {
          return roomLevel_;
        }
        /**
         * <code>required int32 roomLevel = 3;</code>
         */
        public Builder setRoomLevel(int value) {
          bitField0_ |= 0x00000004;
          roomLevel_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 roomLevel = 3;</code>
         */
        public Builder clearRoomLevel() {
          bitField0_ = (bitField0_ & ~0x00000004);
          roomLevel_ = 0;
          onChanged();
          return this;
        }

        // required int32 roomPhase = 4;
        private int roomPhase_ ;
        /**
         * <code>required int32 roomPhase = 4;</code>
         */
        public boolean hasRoomPhase() {
          return ((bitField0_ & 0x00000008) == 0x00000008);
        }
        /**
         * <code>required int32 roomPhase = 4;</code>
         */
        public int getRoomPhase() {
          return roomPhase_;
        }
        /**
         * <code>required int32 roomPhase = 4;</code>
         */
        public Builder setRoomPhase(int value) {
          bitField0_ |= 0x00000008;
          roomPhase_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 roomPhase = 4;</code>
         */
        public Builder clearRoomPhase() {
          bitField0_ = (bitField0_ & ~0x00000008);
          roomPhase_ = 0;
          onChanged();
          return this;
        }

        // required int32 playingCount = 6;
        private int playingCount_ ;
        /**
         * <code>required int32 playingCount = 6;</code>
         */
        public boolean hasPlayingCount() {
          return ((bitField0_ & 0x00000010) == 0x00000010);
        }
        /**
         * <code>required int32 playingCount = 6;</code>
         */
        public int getPlayingCount() {
          return playingCount_;
        }
        /**
         * <code>required int32 playingCount = 6;</code>
         */
        public Builder setPlayingCount(int value) {
          bitField0_ |= 0x00000010;
          playingCount_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 playingCount = 6;</code>
         */
        public Builder clearPlayingCount() {
          bitField0_ = (bitField0_ & ~0x00000010);
          playingCount_ = 0;
          onChanged();
          return this;
        }

        // required int32 sittingCount = 7;
        private int sittingCount_ ;
        /**
         * <code>required int32 sittingCount = 7;</code>
         */
        public boolean hasSittingCount() {
          return ((bitField0_ & 0x00000020) == 0x00000020);
        }
        /**
         * <code>required int32 sittingCount = 7;</code>
         */
        public int getSittingCount() {
          return sittingCount_;
        }
        /**
         * <code>required int32 sittingCount = 7;</code>
         */
        public Builder setSittingCount(int value) {
          bitField0_ |= 0x00000020;
          sittingCount_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 sittingCount = 7;</code>
         */
        public Builder clearSittingCount() {
          bitField0_ = (bitField0_ & ~0x00000020);
          sittingCount_ = 0;
          onChanged();
          return this;
        }

        // required int32 seatsCount = 8;
        private int seatsCount_ ;
        /**
         * <code>required int32 seatsCount = 8;</code>
         */
        public boolean hasSeatsCount() {
          return ((bitField0_ & 0x00000040) == 0x00000040);
        }
        /**
         * <code>required int32 seatsCount = 8;</code>
         */
        public int getSeatsCount() {
          return seatsCount_;
        }
        /**
         * <code>required int32 seatsCount = 8;</code>
         */
        public Builder setSeatsCount(int value) {
          bitField0_ |= 0x00000040;
          seatsCount_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 seatsCount = 8;</code>
         */
        public Builder clearSeatsCount() {
          bitField0_ = (bitField0_ & ~0x00000040);
          seatsCount_ = 0;
          onChanged();
          return this;
        }

        // required int32 betableCount = 9;
        private int betableCount_ ;
        /**
         * <code>required int32 betableCount = 9;</code>
         */
        public boolean hasBetableCount() {
          return ((bitField0_ & 0x00000080) == 0x00000080);
        }
        /**
         * <code>required int32 betableCount = 9;</code>
         */
        public int getBetableCount() {
          return betableCount_;
        }
        /**
         * <code>required int32 betableCount = 9;</code>
         */
        public Builder setBetableCount(int value) {
          bitField0_ |= 0x00000080;
          betableCount_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 betableCount = 9;</code>
         */
        public Builder clearBetableCount() {
          bitField0_ = (bitField0_ & ~0x00000080);
          betableCount_ = 0;
          onChanged();
          return this;
        }

        // required int32 noFoldCount = 10;
        private int noFoldCount_ ;
        /**
         * <code>required int32 noFoldCount = 10;</code>
         */
        public boolean hasNoFoldCount() {
          return ((bitField0_ & 0x00000100) == 0x00000100);
        }
        /**
         * <code>required int32 noFoldCount = 10;</code>
         */
        public int getNoFoldCount() {
          return noFoldCount_;
        }
        /**
         * <code>required int32 noFoldCount = 10;</code>
         */
        public Builder setNoFoldCount(int value) {
          bitField0_ |= 0x00000100;
          noFoldCount_ = value;
          onChanged();
          return this;
        }
        /**
         * <code>required int32 noFoldCount = 10;</code>
         */
        public Builder clearNoFoldCount() {
          bitField0_ = (bitField0_ & ~0x00000100);
          noFoldCount_ = 0;
          onChanged();
          return this;
        }

        // @@protoc_insertion_point(builder_scope:poker.console.RoomListProto.RoomProto)
      }

      static {
        defaultInstance = new RoomProto(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:poker.console.RoomListProto.RoomProto)
    }

    // repeated .poker.console.RoomListProto.RoomProto roomList = 1;
    public static final int ROOMLIST_FIELD_NUMBER = 1;
    private java.util.List<poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto> roomList_;
    /**
     * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
     */
    public java.util.List<poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto> getRoomListList() {
      return roomList_;
    }
    /**
     * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
     */
    public java.util.List<? extends poker.console.ProtoFactoryForConsole.RoomListProto.RoomProtoOrBuilder> 
        getRoomListOrBuilderList() {
      return roomList_;
    }
    /**
     * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
     */
    public int getRoomListCount() {
      return roomList_.size();
    }
    /**
     * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
     */
    public poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto getRoomList(int index) {
      return roomList_.get(index);
    }
    /**
     * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
     */
    public poker.console.ProtoFactoryForConsole.RoomListProto.RoomProtoOrBuilder getRoomListOrBuilder(
        int index) {
      return roomList_.get(index);
    }

    private void initFields() {
      roomList_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getRoomListCount(); i++) {
        if (!getRoomList(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < roomList_.size(); i++) {
        output.writeMessage(1, roomList_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < roomList_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, roomList_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static poker.console.ProtoFactoryForConsole.RoomListProto parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static poker.console.ProtoFactoryForConsole.RoomListProto parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.RoomListProto parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static poker.console.ProtoFactoryForConsole.RoomListProto parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.RoomListProto parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.RoomListProto parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.RoomListProto parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.RoomListProto parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static poker.console.ProtoFactoryForConsole.RoomListProto parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static poker.console.ProtoFactoryForConsole.RoomListProto parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(poker.console.ProtoFactoryForConsole.RoomListProto prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code poker.console.RoomListProto}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements poker.console.ProtoFactoryForConsole.RoomListProtoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomListProto_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomListProto_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                poker.console.ProtoFactoryForConsole.RoomListProto.class, poker.console.ProtoFactoryForConsole.RoomListProto.Builder.class);
      }

      // Construct using poker.console.ProtoFactoryForConsole.RoomListProto.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getRoomListFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (roomListBuilder_ == null) {
          roomList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          roomListBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return poker.console.ProtoFactoryForConsole.internal_static_poker_console_RoomListProto_descriptor;
      }

      public poker.console.ProtoFactoryForConsole.RoomListProto getDefaultInstanceForType() {
        return poker.console.ProtoFactoryForConsole.RoomListProto.getDefaultInstance();
      }

      public poker.console.ProtoFactoryForConsole.RoomListProto build() {
        poker.console.ProtoFactoryForConsole.RoomListProto result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public poker.console.ProtoFactoryForConsole.RoomListProto buildPartial() {
        poker.console.ProtoFactoryForConsole.RoomListProto result = new poker.console.ProtoFactoryForConsole.RoomListProto(this);
        int from_bitField0_ = bitField0_;
        if (roomListBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            roomList_ = java.util.Collections.unmodifiableList(roomList_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.roomList_ = roomList_;
        } else {
          result.roomList_ = roomListBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof poker.console.ProtoFactoryForConsole.RoomListProto) {
          return mergeFrom((poker.console.ProtoFactoryForConsole.RoomListProto)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(poker.console.ProtoFactoryForConsole.RoomListProto other) {
        if (other == poker.console.ProtoFactoryForConsole.RoomListProto.getDefaultInstance()) return this;
        if (roomListBuilder_ == null) {
          if (!other.roomList_.isEmpty()) {
            if (roomList_.isEmpty()) {
              roomList_ = other.roomList_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureRoomListIsMutable();
              roomList_.addAll(other.roomList_);
            }
            onChanged();
          }
        } else {
          if (!other.roomList_.isEmpty()) {
            if (roomListBuilder_.isEmpty()) {
              roomListBuilder_.dispose();
              roomListBuilder_ = null;
              roomList_ = other.roomList_;
              bitField0_ = (bitField0_ & ~0x00000001);
              roomListBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getRoomListFieldBuilder() : null;
            } else {
              roomListBuilder_.addAllMessages(other.roomList_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getRoomListCount(); i++) {
          if (!getRoomList(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        poker.console.ProtoFactoryForConsole.RoomListProto parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (poker.console.ProtoFactoryForConsole.RoomListProto) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .poker.console.RoomListProto.RoomProto roomList = 1;
      private java.util.List<poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto> roomList_ =
        java.util.Collections.emptyList();
      private void ensureRoomListIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          roomList_ = new java.util.ArrayList<poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto>(roomList_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.Builder, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProtoOrBuilder> roomListBuilder_;

      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public java.util.List<poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto> getRoomListList() {
        if (roomListBuilder_ == null) {
          return java.util.Collections.unmodifiableList(roomList_);
        } else {
          return roomListBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public int getRoomListCount() {
        if (roomListBuilder_ == null) {
          return roomList_.size();
        } else {
          return roomListBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto getRoomList(int index) {
        if (roomListBuilder_ == null) {
          return roomList_.get(index);
        } else {
          return roomListBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public Builder setRoomList(
          int index, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto value) {
        if (roomListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRoomListIsMutable();
          roomList_.set(index, value);
          onChanged();
        } else {
          roomListBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public Builder setRoomList(
          int index, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.Builder builderForValue) {
        if (roomListBuilder_ == null) {
          ensureRoomListIsMutable();
          roomList_.set(index, builderForValue.build());
          onChanged();
        } else {
          roomListBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public Builder addRoomList(poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto value) {
        if (roomListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRoomListIsMutable();
          roomList_.add(value);
          onChanged();
        } else {
          roomListBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public Builder addRoomList(
          int index, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto value) {
        if (roomListBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureRoomListIsMutable();
          roomList_.add(index, value);
          onChanged();
        } else {
          roomListBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public Builder addRoomList(
          poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.Builder builderForValue) {
        if (roomListBuilder_ == null) {
          ensureRoomListIsMutable();
          roomList_.add(builderForValue.build());
          onChanged();
        } else {
          roomListBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public Builder addRoomList(
          int index, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.Builder builderForValue) {
        if (roomListBuilder_ == null) {
          ensureRoomListIsMutable();
          roomList_.add(index, builderForValue.build());
          onChanged();
        } else {
          roomListBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public Builder addAllRoomList(
          java.lang.Iterable<? extends poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto> values) {
        if (roomListBuilder_ == null) {
          ensureRoomListIsMutable();
          super.addAll(values, roomList_);
          onChanged();
        } else {
          roomListBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public Builder clearRoomList() {
        if (roomListBuilder_ == null) {
          roomList_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          roomListBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public Builder removeRoomList(int index) {
        if (roomListBuilder_ == null) {
          ensureRoomListIsMutable();
          roomList_.remove(index);
          onChanged();
        } else {
          roomListBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.Builder getRoomListBuilder(
          int index) {
        return getRoomListFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public poker.console.ProtoFactoryForConsole.RoomListProto.RoomProtoOrBuilder getRoomListOrBuilder(
          int index) {
        if (roomListBuilder_ == null) {
          return roomList_.get(index);  } else {
          return roomListBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public java.util.List<? extends poker.console.ProtoFactoryForConsole.RoomListProto.RoomProtoOrBuilder> 
           getRoomListOrBuilderList() {
        if (roomListBuilder_ != null) {
          return roomListBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(roomList_);
        }
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.Builder addRoomListBuilder() {
        return getRoomListFieldBuilder().addBuilder(
            poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.getDefaultInstance());
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.Builder addRoomListBuilder(
          int index) {
        return getRoomListFieldBuilder().addBuilder(
            index, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.getDefaultInstance());
      }
      /**
       * <code>repeated .poker.console.RoomListProto.RoomProto roomList = 1;</code>
       */
      public java.util.List<poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.Builder> 
           getRoomListBuilderList() {
        return getRoomListFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.Builder, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProtoOrBuilder> 
          getRoomListFieldBuilder() {
        if (roomListBuilder_ == null) {
          roomListBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProto.Builder, poker.console.ProtoFactoryForConsole.RoomListProto.RoomProtoOrBuilder>(
                  roomList_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          roomList_ = null;
        }
        return roomListBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:poker.console.RoomListProto)
    }

    static {
      defaultInstance = new RoomListProto(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:poker.console.RoomListProto)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_poker_console_RoomInfoReqProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_poker_console_RoomInfoReqProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_poker_console_PlayerInfoReqProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_poker_console_PlayerInfoReqProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_poker_console_RoomInfoProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_poker_console_RoomInfoProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_poker_console_PlayerProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_poker_console_PlayerProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_poker_console_RoomListProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_poker_console_RoomListProto_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_poker_console_RoomListProto_RoomProto_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_poker_console_RoomListProto_RoomProto_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\034ProtoFactoryForConsole.proto\022\rpoker.co" +
      "nsole\"\"\n\020RoomInfoReqProto\022\016\n\006roomId\030\001 \002(" +
      "\005\"6\n\022PlayerInfoReqProto\022\016\n\006roomId\030\001 \002(\005\022" +
      "\020\n\010playerId\030\002 \002(\005\"\310\002\n\rRoomInfoProto\022.\n\np" +
      "layerList\030\001 \003(\0132\032.poker.console.PlayerPr" +
      "oto\022\016\n\006roomId\030\002 \002(\005\022\022\n\nsmallBlind\030\003 \002(\005\022" +
      "\017\n\007minTake\030\004 \002(\005\022\017\n\007maxTake\030\005 \002(\005\022\022\n\nban" +
      "kerSeat\030\006 \002(\005\022\026\n\016smallBlindSeat\030\007 \002(\005\022\030\n" +
      "\020smallBlindBetted\030\010 \001(\005\022\024\n\014bigBlindSeat\030" +
      "\t \002(\005\022\026\n\016bigBlindBetted\030\n \001(\005\022\021\n\tgamePha",
      "se\030\013 \002(\005\022\014\n\004turn\030\014 \001(\005\022\023\n\013bettingSeat\030\r " +
      "\001(\005\022\027\n\017dealtBoardCards\030\016 \001(\014\"\232\002\n\013PlayerP" +
      "roto\022\020\n\010PlayerId\030\001 \002(\005\022\014\n\004seat\030\002 \002(\005\022\020\n\010" +
      "nickname\030\003 \001(\t\022\020\n\010winTimes\030\004 \002(\005\022\021\n\tlose" +
      "Times\030\005 \002(\005\022\020\n\010portrait\030\006 \002(\005\022\026\n\016portrai" +
      "tBorder\030\007 \002(\005\022\014\n\004male\030\010 \002(\010\022\024\n\014isChallen" +
      "ger\030\t \002(\010\022\020\n\010bankRoll\030\n \002(\005\022\014\n\004gold\030\013 \002(" +
      "\005\022\020\n\010maxScore\030\014 \002(\005\022\021\n\tholeCards\030\r \001(\014\022\020" +
      "\n\010anteList\030\016 \003(\005\022\017\n\007headImg\030\017 \001(\t\"\212\002\n\rRo" +
      "omListProto\0228\n\010roomList\030\001 \003(\0132&.poker.co",
      "nsole.RoomListProto.RoomProto\032\276\001\n\tRoomPr" +
      "oto\022\016\n\006roomId\030\001 \002(\005\022\020\n\010roomType\030\002 \002(\005\022\021\n" +
      "\troomLevel\030\003 \002(\005\022\021\n\troomPhase\030\004 \002(\005\022\024\n\014p" +
      "layingCount\030\006 \002(\005\022\024\n\014sittingCount\030\007 \002(\005\022" +
      "\022\n\nseatsCount\030\010 \002(\005\022\024\n\014betableCount\030\t \002(" +
      "\005\022\023\n\013noFoldCount\030\n \002(\005"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_poker_console_RoomInfoReqProto_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_poker_console_RoomInfoReqProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_poker_console_RoomInfoReqProto_descriptor,
              new java.lang.String[] { "RoomId", });
          internal_static_poker_console_PlayerInfoReqProto_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_poker_console_PlayerInfoReqProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_poker_console_PlayerInfoReqProto_descriptor,
              new java.lang.String[] { "RoomId", "PlayerId", });
          internal_static_poker_console_RoomInfoProto_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_poker_console_RoomInfoProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_poker_console_RoomInfoProto_descriptor,
              new java.lang.String[] { "PlayerList", "RoomId", "SmallBlind", "MinTake", "MaxTake", "BankerSeat", "SmallBlindSeat", "SmallBlindBetted", "BigBlindSeat", "BigBlindBetted", "GamePhase", "Turn", "BettingSeat", "DealtBoardCards", });
          internal_static_poker_console_PlayerProto_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_poker_console_PlayerProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_poker_console_PlayerProto_descriptor,
              new java.lang.String[] { "PlayerId", "Seat", "Nickname", "WinTimes", "LoseTimes", "Portrait", "PortraitBorder", "Male", "IsChallenger", "BankRoll", "Gold", "MaxScore", "HoleCards", "AnteList", "HeadImg", });
          internal_static_poker_console_RoomListProto_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_poker_console_RoomListProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_poker_console_RoomListProto_descriptor,
              new java.lang.String[] { "RoomList", });
          internal_static_poker_console_RoomListProto_RoomProto_descriptor =
            internal_static_poker_console_RoomListProto_descriptor.getNestedTypes().get(0);
          internal_static_poker_console_RoomListProto_RoomProto_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_poker_console_RoomListProto_RoomProto_descriptor,
              new java.lang.String[] { "RoomId", "RoomType", "RoomLevel", "RoomPhase", "PlayingCount", "SittingCount", "SeatsCount", "BetableCount", "NoFoldCount", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
